{"version":3,"file":"C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\processing-engine.ts","sources":["C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\processing-engine.ts"],"names":[],"mappings":"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","sourcesContent":["import * as StateMachine    from 'ts-javascript-state-machine';\r\nimport { \r\n    AssetProcurement, \r\n    PurchaseOrder, VendorShipped, \r\n    IFCReceived, IFCStaged, IFCShipped, RDCReceived, \r\n    Invoice,\r\n    StageType,  \r\n    DiscrepancyType,\r\n    Discrepancy, \r\n    UnitOfMeasureList, \r\n    ADRRuleList, VendorList,\r\n    ADRRule, ADRRuleCondition, ADRFactType, ComparisonType, PackageType } from './models';\r\n\r\n\r\n\r\nexport interface APProcessingConfig {\r\n    uomList?: UnitOfMeasureList,\r\n    adrRuleList?: ADRRuleList\r\n}\r\n\r\nexport interface APMetrics {\r\n    \r\n}\r\n\r\nexport class ProcessingEngine {\r\n\r\n    private states : any = {};  \r\n    private fsm : StateMachine;\r\n\r\n    private ap : AssetProcurement;\r\n    private uomList : UnitOfMeasureList;\r\n    private adrRuleList : ADRRuleList;\r\n    private facts : Map<string, { expected: number, observed: number }> = new Map();\r\n\r\n    constructor() {\r\n        // Define all the states for the FSM\r\n        this.states['Unstarted'] = 'unstarted';\r\n        this.states[StageType.PurchaseOrdered] = 'purchaseOrdered';\r\n        this.states[StageType.VendorShipped] = 'vendorShipped';\r\n        this.states[StageType.IFCReceived] = 'ifcReceived';\r\n        this.states[StageType.IFCStaged] = 'ifcStaged';\r\n        this.states[StageType.IFCShipped] = 'ifcShipped';\r\n        this.states[StageType.RDCReceived] = 'rdcReceived';  \r\n        this.states[StageType.Invoiced] = 'invoiced';      \r\n\r\n        // Create the FSM using the predefined states\r\n        this.fsm = new StateMachine({\r\n            init: 'unstarted',\r\n            transitions: [\r\n                { name: 'itemsDemanded',                from: this.states['Unstarted'],                 to: this.states[StageType.PurchaseOrdered] },\r\n                { name: 'vendorTruckLoaded',            from: this.states[StageType.PurchaseOrdered],   to: this.states[StageType.VendorShipped]  },\r\n                { name: 'ifcTruckUnloaded',             from: this.states[StageType.VendorShipped],     to: this.states[StageType.IFCReceived]    },\r\n                { name: 'homeFreightTruckUnloaded',     from: this.states[StageType.VendorShipped],     to: this.states[StageType.RDCReceived] },\r\n                { name: 'itemsSorted',                  from: this.states[StageType.IFCReceived],       to: this.states[StageType.IFCStaged] },\r\n                { name: 'ifcTruckLoaded',               from: this.states[StageType.IFCStaged],         to: this.states[StageType.IFCShipped] },\r\n                { name: 'rdcTruckUnloaded',             from: this.states[StageType.IFCShipped],        to: this.states[StageType.RDCReceived] },\r\n                { name: 'invoiceReceived',              from: this.states[StageType.RDCReceived],       to: this.states[StageType.Invoiced] }\r\n            ],\r\n            methods: {\r\n                onBeforeItemsDemanded:              this.beforeItemsDemanded.bind(this),\r\n                onPurchaseOrdered:                  this.purchaseOrdered.bind(this),\r\n                onBeforeVendorTruckLoaded:          this.beforeVendorTruckLoaded.bind(this),\r\n                onVendorShipped:                    this.vendorShipped.bind(this),\r\n                onBeforeIfcTruckUnloaded:           this.beforeIFCTruckUnloaded.bind(this),\r\n                onBeforeHomeFreightTruckUnloaded:   this.beforeHomeFreightTruckUnloaded.bind(this),\r\n                onIfcReceived:                      this.ifcReceived.bind(this),\r\n                onBeforeItemsSorted:                this.beforeItemsSorted.bind(this),\r\n                onIfcStaged:                        this.ifcStaged.bind(this),\r\n                onBeforeIfcTruckLoaded:             this.beforeIFCTruckLoaded.bind(this),\r\n                onIfcShipped:                       this.ifcShipped.bind(this),\r\n                onBeforeRdcTruckUnloaded:           this.beforeRDCTruckUnloaded.bind(this),\r\n                onRdcReceived:                      this.rdcReceived.bind(this),\r\n                onBeforeInvoiceReceived:            this.onBeforeInvoiceReceived.bind(this),\r\n                onInvoiced:                         this.invoiced.bind(this)\r\n            }\r\n        });\r\n    }\r\n\r\n    public static startProcessing(assetProcurement : AssetProcurement, config : APProcessingConfig) : AssetProcurement {\r\n        let engine : ProcessingEngine = new ProcessingEngine();\r\n        return engine.startProcessing(assetProcurement, config);\r\n    }\r\n\r\n    public startProcessing(assetProcurement : AssetProcurement, config : APProcessingConfig) : AssetProcurement {\r\n        this.ap = assetProcurement;\r\n\r\n        if (config.uomList === undefined) { return this.finishProcessing(this.ap, config); }\r\n        this.uomList = config.uomList;\r\n\r\n        // Transition to the PurchaseOrdered stage\r\n        this.fsm.itemsDemanded();\r\n        if (this.fsm.state != this.states[StageType.PurchaseOrdered]) { return this.finishProcessing(this.ap, config); }\r\n\r\n        // Transition to the VendorShipped stage\r\n        this.fsm.vendorTruckLoaded();\r\n        if (this.fsm.state != this.states[StageType.VendorShipped]) { return this.finishProcessing(this.ap, config); }\r\n\r\n        // Check if this is HomeFreight\r\n        if (this.ap.isHomeFreight()) {\r\n            // Transition to the RDCReceived stage\r\n            this.fsm.homeFreightTruckUnloaded();\r\n            if (this.fsm.state != this.states[StageType.RDCReceived]) { return this.finishProcessing(this.ap, config); }\r\n        } else {\r\n            // Transition to the IFCReceived stage\r\n            this.fsm.ifcTruckUnloaded();\r\n            if (this.fsm.state != this.states[StageType.IFCReceived]) { return this.finishProcessing(this.ap, config); }\r\n\r\n            // Transition to the IFCStaged stage\r\n            this.fsm.itemsSorted();\r\n            if (this.fsm.state != this.states[StageType.IFCStaged]) { return this.finishProcessing(this.ap, config); }\r\n\r\n            // Transition to the IFCShipped stage\r\n            this.fsm.ifcTruckLoaded();\r\n            if (this.fsm.state != this.states[StageType.IFCShipped]) { return this.finishProcessing(this.ap, config); }\r\n\r\n            // Transition to the RDCReceived stage\r\n            this.fsm.rdcTruckUnloaded();\r\n            if (this.fsm.state != this.states[StageType.RDCReceived]) { return this.finishProcessing(this.ap, config); }\r\n        }\r\n\r\n        // Transition to the Invoiced stage\r\n        this.fsm.invoiceReceived();\r\n        if (this.fsm.state != this.states[StageType.Invoiced]) { return this.finishProcessing(this.ap, config); }\r\n\r\n        return this.ap;\r\n    }\r\n\r\n    private finishProcessing(assetProcurement : AssetProcurement, config : APProcessingConfig) : AssetProcurement {\r\n        //Initially setting recommented solution to 'Further Analysis Required', before running through the ADR rules \r\n        //This additionally helps to not break the existing unit tests\r\n        assetProcurement.RecommendedSolution = 'Further Analysis Required';\r\n        \r\n        // Sanity check to make sure we have the ADR Rule configurations\r\n        if (config.adrRuleList === undefined) { \r\n            console.log('ADR Rules do not exist');\r\n        } else {\r\n            let operators = {\r\n                '!=': function(a, b) { return a != b },\r\n                '==': function(a, b) { return a == b },\r\n                '<': function(a, b) { return a < b },\r\n                '>': function(a, b) { return a > b},\r\n                '>=': function(a, b) {return a >= b},\r\n                '<=': function(a, b) {return a <= b}        \r\n            };\r\n\r\n            // Process each of the ADR rules\r\n            for (let adrrule of config.adrRuleList.Items) {\r\n\r\n                //Loop through all the conditions of an ADR rule to check if any fails\r\n                const indexOfFailingADRRuleCondition = adrrule.Conditions.findIndex((v,i,l) => {                      \r\n                    if( this.facts[v.FactType] != null ){\r\n                        //Determine the %quantity received, i.e - (facts.observed/facts.expected)*100 \r\n                        let receivedPercentage: number = ( this.facts[v.FactType].observed / this.facts[v.FactType].expected ) * 100 ;\r\n                        \r\n                        console.log(`>>>>>> ADR RULE - receivedPercentage ${receivedPercentage}`);\r\n                    \r\n                        //Returns true if any one of the range checks fail \r\n                        //i.e ( minimumvalue minimumcomparisontype receivedpercentage maximumcomparisontype maximumvalue )\r\n                        //e.g ( 0 < 90 <= 100 )\r\n                        return ! ( operators[v.MinimumComparisonType]( v.MinimumValue, receivedPercentage )  &&\r\n                                   operators[v.MaximumComparisonType]( receivedPercentage, v.MaximumValue ) );\r\n                    } else {\r\n                        return true; //FactType doesn't exist\r\n                    }                    \r\n                });\r\n\r\n                if (indexOfFailingADRRuleCondition == -1) {\r\n                    assetProcurement.RecommendedSolution = adrrule.Solution;\r\n                    break;\r\n                } \r\n            }            \r\n        }   \r\n\r\n        // Advanced ADR Rule to check Pack Size tactics - if shortage / overage qty is divisible by pack size\r\n        // Only shortages/overages at RDC are affected by this rule\r\n\r\n        if ( this.facts[ADRFactType.RDCReceivedQuantityMatched] ) {\r\n\r\n            //Check if there is any Shortage Discrepancy\r\n            let shortageIndex :number = assetProcurement.RDCReceivedDiscrepancies.findIndex((v,i,l) => {                      \r\n                return v.DiscrepancyType == DiscrepancyType.Shortage\r\n            });\r\n\r\n            //Check if there is any Overage discrepancy\r\n            let overageIndex :number = assetProcurement.RDCReceivedDiscrepancies.findIndex((v,i,l) => {                      \r\n                return v.DiscrepancyType == DiscrepancyType.Overage\r\n            });\r\n\r\n            //If RDC received a shortage or an Overage of SKU Quantity from Vendor than Vendor Shipped\r\n            if ( shortageIndex != -1 || overageIndex != -1 )\r\n            {\r\n                console.log(\"Executing the Advanced ADR Rule - Pack Size tactics\")\r\n\r\n                //There can be either a shortage or overage not both\r\n                let discrepancyIndex :number = shortageIndex != -1 ? shortageIndex : overageIndex;\r\n                console.log(\"discrepancyindex\", discrepancyIndex);\r\n\r\n                //Determine the SKU that has a shortage or overage from RDCReceivedDiscrepancy\r\n                let skuID: string = assetProcurement.RDCReceivedDiscrepancies[discrepancyIndex].ItemID;\r\n                console.log(\"SKU\", skuID);\r\n\r\n                //Determine the Item Standard (either: each/pack/pallet) in which the SKU Item is counted from the UOM list\r\n                let skuitemIndex :number = config.uomList.Items.findIndex((v,i,l) => {\r\n                    return v.SKU == skuID;\r\n                });\r\n\r\n                if (skuitemIndex != -1 )\r\n                {\r\n                    let itemStandard = config.uomList.Items[skuitemIndex].OrderStandard;\r\n                    console.log(\"Item Standard\", itemStandard);\r\n\r\n                    if(itemStandard != null)\r\n                    {\r\n                        //Determine the count of the itemStandard\r\n                        let standardCount = 0;\r\n\r\n                        switch (itemStandard) {\r\n                            case PackageType.Each:\r\n                                standardCount = config.uomList.Items[skuitemIndex].EachCount;\r\n                                break;\r\n\r\n                            case PackageType.Pack:\r\n                                standardCount = config.uomList.Items[skuitemIndex].PackCount;\r\n                                break;\r\n\r\n                            case PackageType.Pallet:\r\n                                standardCount = config.uomList.Items[skuitemIndex].PalletCount;\r\n                                break;\r\n\r\n                            default:\r\n                                console.log('ERROR: Unrecognized itemStandard - ' + itemStandard.toString() );\r\n                        }\r\n\r\n                        //Standard count cannot be 0 or less than 0\r\n                        if(standardCount > 0)\r\n                        {\r\n                            console.log(\"Standard Count\", standardCount);\r\n\r\n                            //Determine if there is a pack size discrepancy\r\n                            //( Abs(RDC In Qty - Sup ASN Qty) )/package_qty  -- is this whole number?\r\n\r\n                            var quotient: number =  Math.abs( this.facts[ADRFactType.RDCReceivedQuantityMatched].observed - this.facts[ADRFactType.RDCReceivedQuantityMatched].expected ) / standardCount;\r\n\r\n                            console.log(\"this.facts[ADRFactType.RDCReceivedQuantityMatched].observed\", this.facts[ADRFactType.RDCReceivedQuantityMatched].observed);\r\n                            console.log(\"this.facts[ADRFactType.RDCReceivedQuantityMatched].expected\", this.facts[ADRFactType.RDCReceivedQuantityMatched].expected);\r\n                            console.log(\"quotient\", quotient);\r\n\r\n                            var isNotWholeNumber =  (quotient - Math.floor(quotient)) !==0 ;\r\n\r\n                            if(isNotWholeNumber)\r\n                            {\r\n                                console.log(\"quotient is not whole number, there is a pack size discrepancy\", quotient);\r\n                                assetProcurement.RecommendedSolution = \"Pack size discrepancy\";\r\n                            } else\r\n                            {\r\n                                console.log(\"quotient is a whole number, No pack size discrepancy\", quotient)\r\n                            }\r\n                        } else\r\n                        {\r\n                            console.log(\"Count Standard missing for SKU\", skuID);\r\n                        }\r\n\r\n                    } else {\r\n\r\n                            console.log (\"ItemStandard missing for SKU\", skuID);\r\n                    }\r\n                }\r\n            }\r\n\r\n            console.log(\"assetProcurement.RecommendedSolution\", assetProcurement.RecommendedSolution);\r\n            \r\n        }\r\n\r\n        return assetProcurement;    \r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    private beforeItemsDemanded() : boolean {               \r\n        let hasPOData : boolean = this.ensureStageHasData<PurchaseOrder>(StageType.PurchaseOrdered); \r\n        let hasSubsequentData : boolean = (this.ensureStageHasData<VendorShipped>(StageType.VendorShipped) || \r\n                                            this.ensureStageHasData<IFCReceived>(StageType.IFCReceived) || \r\n                                            this.ensureStageHasData<IFCStaged>(StageType.IFCStaged) || \r\n                                            this.ensureStageHasData<IFCShipped>(StageType.IFCShipped) ||\r\n                                            this.ensureStageHasData<RDCReceived>(StageType.RDCReceived) ||\r\n                                            this.ensureStageHasData<Invoice>(StageType.Invoiced));\r\n\r\n        // Add a MissingPO discrepancy if we do not have PO data but we do have some subsequent data\r\n        if (!hasPOData) {\r\n            if (hasSubsequentData) {\r\n                this.createDiscrepancy(DiscrepancyType.MissingPO, StageType.PurchaseOrdered, this.ap.PONumber, \"\", this.ap.PONumber, 1, 0);\r\n            }\r\n                \r\n            // Create the PurchaseOrderQuantityMatched fact\r\n            this.facts[ADRFactType.PurchaseOrderQuantityMatched] = { expected: 1, observed: 0 };\r\n        }\r\n        return hasPOData;\r\n    }\r\n    private beforeVendorTruckLoaded() : boolean {   \r\n        let hasVSData : boolean = this.ensureStageHasData<VendorShipped>(StageType.VendorShipped); \r\n        let hasSubsequentData : boolean = (this.ensureStageHasData<IFCReceived>(StageType.IFCReceived) || \r\n                                            this.ensureStageHasData<IFCStaged>(StageType.IFCStaged) || \r\n                                            this.ensureStageHasData<IFCShipped>(StageType.IFCShipped) ||\r\n                                            this.ensureStageHasData<RDCReceived>(StageType.RDCReceived) ||\r\n                                            this.ensureStageHasData<Invoice>(StageType.Invoiced));\r\n\r\n        // Add a MissingVendorShipped discrepancy if we do not have PO data but we do have some subsequent data\r\n        if (!hasVSData) {\r\n            if (hasSubsequentData) {\r\n                this.createDiscrepancy(DiscrepancyType.MissingVendorShipped, StageType.VendorShipped, this.ap.PONumber, \"\", this.ap.PONumber, 1, 0);\r\n            }\r\n            \r\n            // Create the VendorShippedQuantityMatched fact\r\n            const totalSKUOrdered : number = this.ap.PurchaseOrders!.reduce((p:number,v,i,l)=>{ return (p + v.Quantity); }, 0);\r\n            this.facts[ADRFactType.VendorShippedQuantityMatched] = { expected: totalSKUOrdered, observed: 0 };\r\n        }\r\n        return hasVSData; \r\n    }\r\n    private beforeIFCTruckUnloaded() : boolean {        \r\n        let hasIRData : boolean = this.ensureStageHasData<IFCReceived>(StageType.IFCReceived);  \r\n        \r\n        if (!hasIRData) {            \r\n            // Create the IFCReceivedQuantityMatched fact\r\n            const totalSKUShipped : number = this.ap.VendorShippeds!.reduce((p:number,v,i,l)=>{ return (p + v.Quantity); }, 0);\r\n            this.facts[ADRFactType.IFCReceivedQuantityMatched] = { expected: totalSKUShipped, observed: 0 };\r\n        }\r\n\r\n        return hasIRData;\r\n    }\r\n    private beforeHomeFreightTruckUnloaded() : boolean {        \r\n        let hasRRData : boolean = this.ensureStageHasData<RDCReceived>(StageType.RDCReceived);  \r\n        \r\n        if (!hasRRData) {            \r\n            // Create the RDCReceivedQuantityMatched fact\r\n            const totalSKUShipped : number = this.ap.VendorShippeds!.reduce((p:number,v,i,l)=>{ return (p + v.Quantity); }, 0);\r\n            this.facts[ADRFactType.RDCReceivedQuantityMatched] = { expected: totalSKUShipped, observed: 0 };\r\n        }\r\n\r\n        return hasRRData;\r\n    }\r\n    private beforeItemsSorted() : boolean {                 return this.ensureStageHasData<IFCStaged>(StageType.IFCStaged); }\r\n    private beforeIFCTruckLoaded() : boolean {              return this.ensureStageHasData<IFCShipped>(StageType.IFCShipped); }\r\n    private beforeRDCTruckUnloaded() : boolean {            return this.ensureStageHasData<RDCReceived>(StageType.RDCReceived); }\r\n    private onBeforeInvoiceReceived() : boolean {           return this.ensureStageHasData<Invoice>(StageType.Invoiced); }\r\n    private ensureStageHasData<T extends  PurchaseOrder | VendorShipped | IFCReceived | IFCStaged | IFCShipped | RDCReceived | Invoice>(stageType : StageType) : boolean {\r\n        const sd : T[] | undefined = this.ap.getStageDetails<T>(stageType);\r\n        return (sd !== undefined && sd.length > 0);\r\n    }\r\n\r\n\r\n\r\n    private purchaseOrdered() : void {\r\n        // We should only run this set of business rules when PurchaseOrders are being imported. Otherwise, exit and continue with later stages\r\n        if (this.uomList === undefined || this.uomList.Items.length === 0) { return; }\r\n\r\n        this.ap.setStageDiscrepancies(StageType.PurchaseOrdered, []); \r\n\r\n        // Get the PurchaseOrder data\r\n        const pos : PurchaseOrder[] = this.ap.getStageDetails<PurchaseOrder>(StageType.PurchaseOrdered)!;\r\n\r\n        // Loop through each PurchaseOrder record\r\n        let totalSKUOrdered : number = 0;\r\n        pos.forEach((po,i,l)=>{\r\n            // Try to find the current SKU for the PurchaseOrder in the UoM data\r\n            const uomItemIndex : number = this.uomList.Items.findIndex((vp,ip,lb)=>{return po.SKU==vp.SKU;});\r\n\r\n            if (uomItemIndex === -1) {                \r\n                // The PurchaseOrder contains a SKU that the Vendor does not offer (SKUMissingFromUOM)\r\n                this.createDiscrepancy(\r\n                    DiscrepancyType.SKUMissingFromUOM,\r\n                    StageType.PurchaseOrdered,\r\n                    po.PONumber,\r\n                    po.RecordID,\r\n                    po.SKU,\r\n                    0,\r\n                    po.Quantity\r\n                );\r\n            }\r\n\r\n            totalSKUOrdered += po.Quantity;\r\n        });\r\n\r\n        // Update the PurchaseOrderQuantityMatched fact\r\n        this.facts[ADRFactType.PurchaseOrderQuantityMatched] = { expected: totalSKUOrdered, observed: totalSKUOrdered };\r\n    }\r\n    private vendorShipped() : void {\r\n        this.ap.setStageDiscrepancies(StageType.VendorShipped, []); \r\n\r\n        // Get the PurchaseOrder and VendorShipped data\r\n        const pos : PurchaseOrder[] = this.ap.getStageDetails<PurchaseOrder>(StageType.PurchaseOrdered)!;\r\n        const vss : VendorShipped[] = this.ap.getStageDetails<VendorShipped>(StageType.VendorShipped)!;\r\n\r\n        // Loop through each VendorShipped record, comparing to PurchaseOrder records\r\n        vss.forEach((v,i,l)=>{\r\n            if (v.SKU.trim().length == 0) {                \r\n                // The Vendor shipped an item with a blank SKU that was not on the original PO (BlankSKUAtVendorShipped)\r\n                this.createDiscrepancy(\r\n                    DiscrepancyType.BlankSKUAtVendorShipped,\r\n                    StageType.VendorShipped, \r\n                    v.PONumber,\r\n                    v.RecordID,\r\n                    v.SKU,\r\n                    0,\r\n                    v.Quantity\r\n                );\r\n                return;\r\n            }\r\n            // Try to find the current SKU on the original PO.  Look for RDC for an exact match\r\n            let poItemIndex : number = pos.findIndex((vp,ip,lb)=>{return v.SKU==vp.SKU && v.RDC==vp.RDC;});\r\n            if (poItemIndex == -1) {\r\n                // If this is a homefreight situation, then we should look at the ifc\r\n                poItemIndex = pos.findIndex((vp,ip,lb)=>{return v.SKU==vp.SKU && v.RDC==vp.IFCDC && vp.RDC==null;});\r\n\r\n                if (poItemIndex == -1) {\r\n                    // Try a less exact match with only SKU\r\n                    poItemIndex = pos.findIndex((vp,ip,lb)=>{return v.SKU==vp.SKU;});\r\n                }\r\n            }\r\n            const ss : VendorShipped = v;\r\n\r\n            let expectedQuantity : number = 0;\r\n            let totalSKUShipped : number = 0;\r\n            if (poItemIndex > -1) {\r\n                const po : PurchaseOrder = pos[poItemIndex];\r\n                expectedQuantity = po.Quantity;\r\n\r\n                if ((po.RDC! != ss.RDC && po.RDC != null) || (po.RDC == null && po.IFCDC != ss.RDC)) {\r\n                    // The Vendor shipped to the wrong RDC (WrongRDC)\r\n                    this.createDiscrepancy(\r\n                        DiscrepancyType.WrongRDC,\r\n                        StageType.VendorShipped,\r\n                        po.PONumber,\r\n                        ss.RecordID,\r\n                        ss.RDC,\r\n                        0,\r\n                        0\r\n                    );\r\n                }\r\n\r\n                // We need to aggregate all the quantities for the current SKU\r\n                totalSKUShipped = vss.reduce((sp:number,sv,si:number,sl)=>{\r\n                    if (sv.SKU == po.SKU) { return (sp + sv.Quantity); }\r\n                    else { return sp; }\r\n                }, 0);\r\n\r\n                if (expectedQuantity > totalSKUShipped) {\r\n                    // The Vendor shipped less than expected (FillShortage)\r\n                    this.createDiscrepancy(\r\n                        DiscrepancyType.FillShortage,\r\n                        StageType.VendorShipped, \r\n                        po.PONumber,\r\n                        ss.RecordID,\r\n                        po.SKU,\r\n                        expectedQuantity,\r\n                        totalSKUShipped\r\n                    );\r\n                }\r\n\r\n                if (expectedQuantity < totalSKUShipped) {\r\n                    // The Vendor shipped more than expected (FillOverage)\r\n                    this.createDiscrepancy(\r\n                        DiscrepancyType.FillOverage,\r\n                        StageType.VendorShipped, \r\n                        po.PONumber,\r\n                        ss.RecordID,\r\n                        po.SKU,\r\n                        expectedQuantity,\r\n                        totalSKUShipped\r\n                    );\r\n                }                    \r\n            } else {\r\n                // The Vendor shipped a SKU that was not on the original PO (WrongSKU)\r\n                this.createDiscrepancy(\r\n                    DiscrepancyType.WrongSKU,\r\n                    StageType.VendorShipped, \r\n                    ss.PONumber,\r\n                    ss.RecordID,\r\n                    ss.SKU,\r\n                    0,\r\n                    ss.Quantity\r\n                );\r\n                totalSKUShipped = ss.Quantity;\r\n            }            \r\n                \r\n            // Update the VendorShippedQuantityMatched fact\r\n            if (this.facts[ADRFactType.VendorShippedQuantityMatched] === undefined) {\r\n                this.facts[ADRFactType.VendorShippedQuantityMatched] = { expected: expectedQuantity, observed: totalSKUShipped };\r\n            } else {\r\n                this.facts[ADRFactType.VendorShippedQuantityMatched].expected += expectedQuantity;\r\n                this.facts[ADRFactType.VendorShippedQuantityMatched].observed += totalSKUShipped;\r\n            } \r\n        });\r\n    }\r\n    private ifcReceived() : void {\r\n        this.ap.setStageDiscrepancies(StageType.IFCReceived, []); \r\n\r\n        // Get the PurchaseOrder, VendorShipped, and IFCReceived data\r\n        const pos : PurchaseOrder[] = this.ap.getStageDetails<PurchaseOrder>(StageType.PurchaseOrdered)!;\r\n        const vss : VendorShipped[] = this.ap.getStageDetails<VendorShipped>(StageType.VendorShipped)!;        \r\n        const irs : IFCReceived[] = this.ap.getStageDetails<IFCReceived>(StageType.IFCReceived)!;    \r\n\r\n        // Count the pallets the Vendor shipped and the IFC received\r\n        const shippedUCCCounts : any[] = vss.reduce((p:any[],v,i,l)=>{\r\n            let uccIndex : number = p.findIndex((vi,ii,li)=>{return Object.keys(vi)[0] == v.UCC128;});\r\n            if (uccIndex == -1) { \r\n                uccIndex = p.length;\r\n                p[uccIndex] = {};\r\n                p[uccIndex][v.UCC128] = [ v.RecordID ]; \r\n            } else { p[uccIndex][v.UCC128].push(v.RecordID); }\r\n            return p;\r\n        }, []);\r\n        const receivedUCCCounts : any[] = irs.reduce((p:any[],v,i,l)=>{\r\n            let uccIndex : number = p.findIndex((vi,ii,li)=>{return Object.keys(vi)[0] == v.UCC128;});\r\n            if (uccIndex == -1) { \r\n                uccIndex = p.length;\r\n                p[uccIndex] = {};\r\n                p[uccIndex][v.UCC128] = [ v.RecordID ]; \r\n            } else { p[uccIndex][v.UCC128].push(v.RecordID); }\r\n            return p;\r\n        }, []);\r\n\r\n        // Check if some shipped pallets were never received (MissingPallet)\r\n        shippedUCCCounts.forEach((v,i,l)=>{\r\n            const currentUCC128 : string = Object.keys(v)[0];\r\n            const shippedQuantity : number = 1; \r\n            let receivedQuantity : number = 0;\r\n            const receivedIndex : number = receivedUCCCounts.findIndex((sv,si,sl)=>{ return (currentUCC128 == Object.keys(sv)[0]); });\r\n            if (receivedIndex > -1) { receivedQuantity = 1; }\r\n            \r\n            if (shippedQuantity > receivedQuantity) {\r\n                // We are receiving less pallets than were shipped (MissingPallet)\r\n                const missingPalletRecordIDs : string[] = Object.values(v)[0] as string[];\r\n                for (let x = 0; x < missingPalletRecordIDs.length; x++) {                    \r\n                    this.createDiscrepancy(\r\n                        DiscrepancyType.MissingPallet,\r\n                        StageType.IFCReceived,  \r\n                        this.ap.PONumber,\r\n                        missingPalletRecordIDs[x],\r\n                        currentUCC128,\r\n                        shippedQuantity,\r\n                        receivedQuantity\r\n                    );\r\n                }\r\n            }\r\n        });\r\n        \r\n        // Check if some received pallets were never shipped (AdditionalPallet)\r\n        receivedUCCCounts.forEach((v,i,l)=>{\r\n            const currentUCC128 : string = Object.keys(v)[0];\r\n            const receivedQuantity : number = 1; // Object.values(v)[0] as number;\r\n            let shippedQuantity : number = 0;\r\n            const shippedIndex : number = shippedUCCCounts.findIndex((sv,si,sl)=>{ return (currentUCC128 == Object.keys(sv)[0]); });\r\n            if (shippedIndex > -1) { shippedQuantity = 1; }\r\n            \r\n            if (shippedQuantity < receivedQuantity) {\r\n                // We are receiving less pallets than were shipped (AdditionalPallet)\r\n                const additionalPalletRecordIDs : string[] = Object.values(v)[0] as string[];\r\n                for (let x = 0; x < additionalPalletRecordIDs.length; x++) {\r\n                    this.createDiscrepancy(\r\n                        DiscrepancyType.AdditionalPallet,\r\n                        StageType.IFCReceived, \r\n                        this.ap.PONumber,\r\n                        additionalPalletRecordIDs[x],\r\n                        currentUCC128,\r\n                        shippedQuantity,\r\n                        receivedQuantity\r\n                    );\r\n                }\r\n            }\r\n        });\r\n\r\n        // Loop through each IFCReceived record, comparing to PurchaseOrder records\r\n        let expectedQuantity : number = 0;\r\n        let totalSKUReceived : number = 0;\r\n        irs.forEach((v,i,l)=>{\r\n            // Try to find the current SKU on the original PO.  Look for RDC for an exact match\r\n            let poItemIndex : number = pos.findIndex((vp,ip,lb)=>{return v.SKU==vp.SKU && v.RDC==vp.RDC;});\r\n            if (poItemIndex == -1) {\r\n                // If this is a homefreight situation, then we should look at the ifc\r\n                poItemIndex = pos.findIndex((vp,ip,lb)=>{return v.SKU==vp.SKU && v.RDC==vp.IFCDC && vp.RDC==null;});\r\n\r\n                if (poItemIndex == -1) {\r\n                    // Try a less exact match with only SKU\r\n                    poItemIndex = pos.findIndex((vp,ip,lb)=>{return v.SKU==vp.SKU;});\r\n                }\r\n            }\r\n            // Determine the total amount of the current SKU on the VendorShipment.\r\n            expectedQuantity = vss.reduce((pp:number, vp,ip,lb)=>{\r\n                if (v.SKU==vp.SKU) { return (pp + vp.Quantity); } else { return pp; }\r\n            }, 0);\r\n            const ir : IFCReceived = v;\r\n\r\n            // We need to aggregate all the quantities for the current SKU\r\n            totalSKUReceived = irs.reduce((ip:number,iv,ii:number,il)=>{\r\n                if (iv.SKU == v.SKU) { return (ip + iv.ReceivedQuantity); } else { return ip; }\r\n            }, 0);\r\n\r\n            if (poItemIndex > -1) {\r\n                const po : PurchaseOrder = pos[poItemIndex];\r\n\r\n                if ((po.RDC! != ir.RDC && po.RDC != null) || (po.RDC == null && po.IFCDC != ir.RDC)) {\r\n                    // The IFC Received for the wrong RDC (WrongRDC)\r\n                    this.createDiscrepancy(\r\n                        DiscrepancyType.WrongRDC,\r\n                        StageType.IFCReceived,\r\n                        po.PONumber,\r\n                        v.RecordID,\r\n                        ir.RDC,\r\n                        0,\r\n                        0\r\n                    );\r\n                }\r\n\r\n                if (expectedQuantity > totalSKUReceived) {\r\n                    // The IFC Received less than expected (Shortage)\r\n                    this.createDiscrepancy(\r\n                        DiscrepancyType.Shortage,\r\n                        StageType.IFCReceived, \r\n                        po.PONumber,\r\n                        v.RecordID,\r\n                        po.SKU,\r\n                        expectedQuantity,\r\n                        totalSKUReceived\r\n                    );\r\n                }\r\n\r\n                if (expectedQuantity < totalSKUReceived) {\r\n                    // The IFC Received more than expected (Overage)\r\n                    this.createDiscrepancy(\r\n                        DiscrepancyType.Overage,\r\n                        StageType.IFCReceived, \r\n                        po.PONumber,\r\n                        v.RecordID,\r\n                        po.SKU,\r\n                        expectedQuantity,\r\n                        totalSKUReceived\r\n                    );\r\n                }\r\n            } else {\r\n                // The IFC received a SKU that was not on the original PO (WrongSKU)\r\n                this.createDiscrepancy(\r\n                    DiscrepancyType.WrongSKU,\r\n                    StageType.IFCReceived, \r\n                    ir.PONumber,\r\n                    v.RecordID,\r\n                    ir.SKU,\r\n                    0,\r\n                    totalSKUReceived\r\n                );\r\n            }         \r\n                \r\n            // Update the IFCReceivedQuantityMatched fact\r\n            if (this.facts[ADRFactType.IFCReceivedQuantityMatched] === undefined) {\r\n                this.facts[ADRFactType.IFCReceivedQuantityMatched] = { expected: expectedQuantity, observed: totalSKUReceived };\r\n            } else {\r\n                this.facts[ADRFactType.IFCReceivedQuantityMatched].expected += expectedQuantity;\r\n                this.facts[ADRFactType.IFCReceivedQuantityMatched].observed += totalSKUReceived;\r\n            } \r\n        });\r\n    }\r\n    private ifcStaged() : void {\r\n        this.ap.setStageDiscrepancies(StageType.IFCStaged, []); \r\n\r\n        // Get the PurchaseOrder, IFCReceived, and IFCStaged data\r\n        const pos : PurchaseOrder[] = this.ap.getStageDetails<PurchaseOrder>(StageType.PurchaseOrdered)!;        \r\n        const vss : VendorShipped[] = this.ap.getStageDetails<VendorShipped>(StageType.VendorShipped)!;       \r\n        const irs : IFCReceived[] = this.ap.getStageDetails<IFCReceived>(StageType.IFCReceived)!;       \r\n        const ists : IFCStaged[] = this.ap.getStageDetails<IFCStaged>(StageType.IFCStaged)!;  \r\n\r\n        // Count the pallets the IFC received, and then IFC staged\r\n        const receivedUCCCounts : any[] = irs.reduce((p:any[],v,i,l)=>{\r\n            let uccIndex : number = p.findIndex((vi,ii,li)=>{return Object.keys(vi)[0] == v.UCC128;});\r\n            if (uccIndex == -1) { \r\n                uccIndex = p.length;\r\n                p[uccIndex] = {};\r\n                p[uccIndex][v.UCC128] = [ v.RecordID ]; \r\n            } else { p[uccIndex][v.UCC128].push(v.RecordID); }\r\n            return p;\r\n        }, []);\r\n        const stagedUCCCounts : any[] = ists.reduce((p:any[],v,i,l)=>{\r\n            let uccIndex : number = p.findIndex((vi,ii,li)=>{return Object.keys(vi)[0] == v.UCC128;});\r\n            if (uccIndex == -1) { \r\n                uccIndex = p.length;\r\n                p[uccIndex] = {};\r\n                p[uccIndex][v.UCC128] = [ v.RecordID ]; \r\n            } else { p[uccIndex][v.UCC128].push(v.RecordID); }\r\n            return p;\r\n        }, []);\r\n\r\n        // Check if some received pallets were never staged (MissingPallet)\r\n        receivedUCCCounts.forEach((v,i,l)=>{\r\n            const currentUCC128 : string = Object.keys(v)[0];\r\n            const receivedQuantity : number = 1;\r\n            let stagedQuantity : number = 0;\r\n            const stagedIndex : number = stagedUCCCounts.findIndex((sv,si,sl)=>{ return (currentUCC128 == Object.keys(sv)[0]); });\r\n            if (stagedIndex > -1) { stagedQuantity = 1; }\r\n\r\n            if (receivedQuantity > stagedQuantity) {\r\n                // We are staging less pallets than were received (MissingPallet)\r\n                const missingPalletRecordIDs : string[] = Object.values(v)[0] as string[];\r\n                for (let x = 0; x < missingPalletRecordIDs.length; x++) {\r\n                    this.createDiscrepancy(\r\n                        DiscrepancyType.MissingPallet,\r\n                        StageType.IFCStaged, \r\n                        this.ap.PONumber,\r\n                        missingPalletRecordIDs[x],\r\n                        currentUCC128,\r\n                        receivedQuantity,\r\n                        stagedQuantity\r\n                    );\r\n                }\r\n            }\r\n        });\r\n        \r\n        // Check if some staged pallets were never received (AdditionalPallet)\r\n        stagedUCCCounts.forEach((v,i,l)=>{\r\n            const currentUCC128 : string = Object.keys(v)[0];\r\n            const stagedQuantity : number = 1;\r\n            let receivedQuantity : number = 0;\r\n            const receivedIndex : number = receivedUCCCounts.findIndex((sv,si,sl)=>{ return (currentUCC128 == Object.keys(sv)[0]); });\r\n            if (receivedIndex > -1) { receivedQuantity = 1; }\r\n\r\n            if (receivedQuantity < stagedQuantity) {\r\n                // We are receiving less pallets than were shipped (AdditionalPallet)\r\n                const additionalPalletRecordIDs : string[] = Object.values(v)[0] as string[];\r\n                for (let x = 0; x < additionalPalletRecordIDs.length; x++) {\r\n                    this.createDiscrepancy(\r\n                        DiscrepancyType.AdditionalPallet,\r\n                        StageType.IFCStaged,  \r\n                        this.ap.PONumber,\r\n                        additionalPalletRecordIDs[x],\r\n                        currentUCC128,\r\n                        receivedQuantity,\r\n                        stagedQuantity\r\n                    );\r\n                }\r\n            }\r\n        });\r\n\r\n        // Loop through each IFCStaged record, comparing to PurchaseOrder and VendorShipped records\r\n        let expectedQuantity : number = 0;\r\n        let totalSKUStaged : number = 0;\r\n        ists.forEach((v,i,l)=>{\r\n            // Try to find the current SKU on the original PO.  Look for RDC for an exact match\r\n            let poItemIndex : number = pos.findIndex((vp,ip,lb)=>{return v.SKU==vp.SKU && v.RDC==vp.RDC;});\r\n            if (poItemIndex == -1) {\r\n                // If this is a homefreight situation, then we should look at the ifc\r\n                poItemIndex = pos.findIndex((vp,ip,lb)=>{return v.SKU==vp.SKU && v.RDC==vp.IFCDC && vp.RDC==null;});\r\n\r\n                if (poItemIndex == -1) {\r\n                    // Try a less exact match with only SKU\r\n                    poItemIndex = pos.findIndex((vp,ip,lb)=>{return v.SKU==vp.SKU;});\r\n                }\r\n            }\r\n            // Determine the total amount of the current SKU on the VendorShipment.\r\n            expectedQuantity = vss.reduce((pp:number, vp,ip,lb)=>{\r\n                if (v.SKU==vp.SKU) { return (pp + vp.Quantity); } else { return pp; }\r\n            }, 0);\r\n            const ist : IFCStaged = v;\r\n\r\n            // We need to aggregate all the quantities for the current SKU\r\n            totalSKUStaged = ists.reduce((ip:number,iv,ii,il)=>{\r\n                if (iv.SKU == v.SKU) { return (ip + iv.Quantity); } else { return ip; }\r\n            }, 0);\r\n\r\n            if (poItemIndex > -1) {\r\n                const po : PurchaseOrder = pos[poItemIndex];\r\n\r\n                if ((po.RDC! != ist.RDC && po.RDC != null) || (po.RDC == null && po.IFCDC != ist.RDC)) {\r\n                    // The IFC Staged for the wrong RDC (WrongRDC)\r\n                    this.createDiscrepancy(\r\n                        DiscrepancyType.WrongRDC,\r\n                        StageType.IFCStaged,\r\n                        po.PONumber,\r\n                        ist.RecordID,\r\n                        ist.RDC,\r\n                        0,\r\n                        0\r\n                    );\r\n                }\r\n\r\n                if (expectedQuantity > totalSKUStaged) {\r\n                    // The IFC Staged less than expected (Shortage)\r\n                    this.createDiscrepancy(\r\n                        DiscrepancyType.Shortage,\r\n                        StageType.IFCStaged, \r\n                        po.PONumber,\r\n                        v.RecordID,\r\n                        po.SKU,\r\n                        expectedQuantity,\r\n                        totalSKUStaged\r\n                    );\r\n                }\r\n\r\n                if (expectedQuantity < totalSKUStaged) {\r\n                    // The IFC Staged more than expected (Overage)\r\n                    this.createDiscrepancy(\r\n                        DiscrepancyType.Overage,\r\n                        StageType.IFCStaged, \r\n                        po.PONumber,\r\n                        v.RecordID,\r\n                        po.SKU,\r\n                        expectedQuantity,\r\n                        totalSKUStaged\r\n                    );\r\n                }\r\n            } else {\r\n                // The IFC Staged a SKU that was not on the original PO (WrongSKU)\r\n                this.createDiscrepancy(\r\n                    DiscrepancyType.WrongSKU,\r\n                    StageType.IFCStaged, \r\n                    ist.PONumber,\r\n                    v.RecordID,\r\n                    ist.SKU,\r\n                    0,\r\n                    totalSKUStaged\r\n                );\r\n            }        \r\n                \r\n            // Update the IFCStagedQuantityMatched fact\r\n            if (this.facts[ADRFactType.IFCStagedQuantityMatched] === undefined) {\r\n                this.facts[ADRFactType.IFCStagedQuantityMatched] = { expected: expectedQuantity, observed: totalSKUStaged };\r\n            } else {\r\n                this.facts[ADRFactType.IFCStagedQuantityMatched].expected += expectedQuantity;\r\n                this.facts[ADRFactType.IFCStagedQuantityMatched].observed += totalSKUStaged;\r\n            } \r\n        });\r\n    }\r\n    private ifcShipped() : void {\r\n        this.ap.setStageDiscrepancies(StageType.IFCShipped, []); \r\n\r\n        // Get the PurchaseOrder and IFCShipped data\r\n        const pos : PurchaseOrder[] = this.ap.getStageDetails<PurchaseOrder>(StageType.PurchaseOrdered)!;          \r\n        const vss : VendorShipped[] = this.ap.getStageDetails<VendorShipped>(StageType.VendorShipped)!;  \r\n        const ishs : IFCShipped[] = this.ap.getStageDetails<IFCShipped>(StageType.IFCShipped)!; \r\n\r\n        // Loop through each IFCShipped record, comparing to PurchaseOrder & VendorShipped records\r\n        let expectedQuantity : number = 0;\r\n        let totalSKUShipped : number = 0;\r\n        ishs.forEach((v,i,l)=>{\r\n            // Try to find the current SKU on the original PO.  Look for RDC for an exact match\r\n            let poItemIndex : number = pos.findIndex((vp,ip,lb)=>{return v.SKU==vp.SKU && v.RDC==vp.RDC;});\r\n            if (poItemIndex == -1) {\r\n                // If this is a homefreight situation, then we should look at the ifc\r\n                poItemIndex = pos.findIndex((vp,ip,lb)=>{return v.SKU==vp.SKU && v.RDC==vp.IFCDC && vp.RDC==null;});\r\n\r\n                if (poItemIndex == -1) {\r\n                    // Try a less exact match with only SKU\r\n                    poItemIndex = pos.findIndex((vp,ip,lb)=>{return v.SKU==vp.SKU;});\r\n                }\r\n            }\r\n            // Determine the total amount of the current SKU on the VendorShipment.\r\n            expectedQuantity = vss.reduce((pp:number, vp,ip,lb)=>{\r\n                if (v.SKU==vp.SKU) { return (pp + vp.Quantity); } else { return pp; }\r\n            }, 0);\r\n            const ish : IFCShipped = v;\r\n\r\n            // We need to aggregate all the quantities for the current SKU\r\n            totalSKUShipped = ishs.reduce((ip:number,iv,ii,il)=>{\r\n                if (iv.SKU == v.SKU) { return (ip + iv.Quantity); } else { return ip; }\r\n            }, 0);\r\n\r\n            if (poItemIndex > -1) {\r\n                const po : PurchaseOrder = pos[poItemIndex];\r\n\r\n                if ((po.RDC! != ish.RDC && po.RDC != null) || (po.RDC == null && po.IFCDC != ish.RDC)) {\r\n                    // The IFC shipped to the wrong RDC (WrongRDC)\r\n                    this.createDiscrepancy(\r\n                        DiscrepancyType.WrongRDC,\r\n                        StageType.IFCShipped,\r\n                        po.PONumber,\r\n                        v.RecordID,\r\n                        ish.RDC,\r\n                        0,\r\n                        0\r\n                    );\r\n                }\r\n\r\n                if (expectedQuantity > totalSKUShipped) {\r\n                    // The IFC shipped less than expected (Shortage)\r\n                    this.createDiscrepancy(\r\n                        DiscrepancyType.Shortage,\r\n                        StageType.IFCShipped, \r\n                        po.PONumber,\r\n                        v.RecordID,\r\n                        po.SKU,\r\n                        expectedQuantity,\r\n                        totalSKUShipped\r\n                    );\r\n                }\r\n\r\n                if (expectedQuantity < totalSKUShipped) {\r\n                    // The IFC shipped more than expected (Overage)\r\n                    this.createDiscrepancy(\r\n                        DiscrepancyType.Overage,\r\n                        StageType.IFCShipped, \r\n                        po.PONumber,\r\n                        v.RecordID,\r\n                        po.SKU,\r\n                        expectedQuantity,\r\n                        totalSKUShipped\r\n                    );\r\n                }\r\n            } else {\r\n                // The IFC shipped a SKU that was not on the original PO (WrongSKU)\r\n                this.createDiscrepancy(\r\n                    DiscrepancyType.WrongSKU,\r\n                    StageType.IFCShipped, \r\n                    ish.PONumber,\r\n                    v.RecordID,\r\n                    ish.SKU,\r\n                    0,\r\n                    totalSKUShipped\r\n                );\r\n            }\r\n                \r\n            // Update the IFCShippedQuantityMatched fact\r\n            if (this.facts[ADRFactType.IFCShippedQuantityMatched] === undefined) {\r\n                this.facts[ADRFactType.IFCShippedQuantityMatched] = { expected: expectedQuantity, observed: totalSKUShipped };\r\n            } else {\r\n                this.facts[ADRFactType.IFCShippedQuantityMatched].expected += expectedQuantity;\r\n                this.facts[ADRFactType.IFCShippedQuantityMatched].observed += totalSKUShipped;\r\n            } \r\n        });\r\n    }\r\n    private rdcReceived() : void {\r\n        this.ap.setStageDiscrepancies(StageType.RDCReceived, []); \r\n\r\n        // Get the PurchaseOrdered and RDCReceived stages\r\n        const pos : PurchaseOrder[] = this.ap.getStageDetails<PurchaseOrder>(StageType.PurchaseOrdered)!;          \r\n        const vss : VendorShipped[] = this.ap.getStageDetails<VendorShipped>(StageType.VendorShipped)!;  \r\n        const rrs : RDCReceived[] = this.ap.getStageDetails<RDCReceived>(StageType.RDCReceived)!; \r\n\r\n        // Loop through each RDCReceived record, comparing to PurchaseOrder & VendorShipped records\r\n        let expectedQuantity : number = 0;\r\n        let totalSKUReceived : number = 0;\r\n        rrs.forEach((v,i,l)=>{\r\n            // Try to find the current SKU on the original PO.  Look for RDC for an exact match\r\n            let poItemIndex : number = pos.findIndex((vp,ip,lb)=>{return v.SKU==vp.SKU && v.RDC==vp.RDC;});\r\n            if (poItemIndex == -1) {\r\n                // If this is a homefreight situation, then we should look at the ifc\r\n                poItemIndex = pos.findIndex((vp,ip,lb)=>{return v.SKU==vp.SKU && v.RDC==vp.IFCDC && vp.RDC==null;});\r\n\r\n                if (poItemIndex == -1) {\r\n                    // Try a less exact match with only SKU\r\n                    poItemIndex = pos.findIndex((vp,ip,lb)=>{return v.SKU==vp.SKU;});\r\n                }\r\n            }\r\n            // Determine the total amount of the current SKU on the VendorShipment.\r\n            expectedQuantity = vss.reduce((pp:number, vp,ip,lb)=>{\r\n                if (v.SKU==vp.SKU) { return (pp + vp.Quantity); } else { return pp; }\r\n            }, 0);\r\n            const rr : RDCReceived = v;\r\n\r\n            // We need to aggregate all the quantities for the current SKU\r\n            totalSKUReceived = rrs.reduce((ip:number,iv,ii,il)=>{\r\n                if (iv.SKU == v.SKU) { return (ip + iv.Quantity); } else { return ip; }\r\n            }, 0);\r\n\r\n            if (poItemIndex > -1) {\r\n                const po : PurchaseOrder = pos[poItemIndex];\r\n\r\n                if ((po.RDC! != rr.RDC && po.RDC != null) || (po.RDC == null && po.IFCDC != rr.RDC)) {\r\n                    // The RDC received for the wrong RDC (WrongRDC)\r\n                    this.createDiscrepancy(\r\n                        DiscrepancyType.WrongRDC,\r\n                        StageType.RDCReceived,\r\n                        po.PONumber,\r\n                        rr.RecordID,\r\n                        rr.RDC,\r\n                        0,\r\n                        0\r\n                    );\r\n                }\r\n\r\n                if (expectedQuantity > totalSKUReceived) {\r\n                    // The RDC received less than expected (Shortage)\r\n                    this.createDiscrepancy(\r\n                        DiscrepancyType.Shortage,\r\n                        StageType.RDCReceived, \r\n                        po.PONumber,\r\n                        rr.RecordID,\r\n                        po.SKU,\r\n                        expectedQuantity,\r\n                        totalSKUReceived\r\n                    );\r\n                }\r\n\r\n                if (expectedQuantity < totalSKUReceived) {\r\n                    // The RDC received more than expected (Overage)\r\n                    this.createDiscrepancy(\r\n                        DiscrepancyType.Overage,\r\n                        StageType.RDCReceived, \r\n                        po.PONumber,\r\n                        rr.RecordID,\r\n                        po.SKU,\r\n                        expectedQuantity,\r\n                        totalSKUReceived\r\n                    );\r\n                }\r\n            } else {\r\n                // The RDC received a SKU that was not on the original PO (WrongSKU)\r\n                this.createDiscrepancy(\r\n                    DiscrepancyType.WrongSKU,\r\n                    StageType.RDCReceived, \r\n                    rr.PONumber,\r\n                    rr.RecordID,\r\n                    rr.SKU,\r\n                    0,\r\n                    totalSKUReceived\r\n                );\r\n            }\r\n                \r\n            // Update the RDCReceivedQuantityMatched fact\r\n            if (this.facts[ADRFactType.RDCReceivedQuantityMatched] === undefined) {\r\n                this.facts[ADRFactType.RDCReceivedQuantityMatched] = { expected: expectedQuantity, observed: totalSKUReceived };\r\n            } else {\r\n                this.facts[ADRFactType.RDCReceivedQuantityMatched].expected += expectedQuantity;\r\n                this.facts[ADRFactType.RDCReceivedQuantityMatched].observed += totalSKUReceived;\r\n            } \r\n        });\r\n    }\r\n    private invoiced() : void {\r\n        this.ap.setStageDiscrepancies(StageType.Invoiced, []); \r\n\r\n        // Get the PurchaseOrdered and Invoiced stages\r\n        const pos : PurchaseOrder[] = this.ap.getStageDetails<PurchaseOrder>(StageType.PurchaseOrdered)!;  \r\n        const invs : Invoice[] = this.ap.getStageDetails<Invoice>(StageType.Invoiced)!; \r\n\r\n        // Loop through each Invoice record, comparing to PurchaseOrder records\r\n        invs.forEach((v,i,l)=>{\r\n\r\n\r\n        });\r\n    }\r\n\r\n\r\n\r\n    private createDiscrepancy(  discrepancyType : DiscrepancyType, \r\n                                stageType : StageType, \r\n                                poNumber : string, \r\n                                importedRecordID : string, \r\n                                itemID : string, \r\n                                expectedQuantity : number, \r\n                                observedQuantity : number) : void {\r\n\r\n        // Only add unique discrepancies\r\n        let existingDiscrepancies : Discrepancy[] | undefined = this.ap.getStageDiscrepancies(stageType);\r\n        if (existingDiscrepancies !== undefined && existingDiscrepancies.length > 0) {\r\n            let existingDiscrepancyIndex : number = existingDiscrepancies.findIndex((v,i,l)=>{ return v.DiscrepancyType == discrepancyType && v.RecordID == importedRecordID; });\r\n\r\n            // We are definitely flagging the same thing twice.  Exit without adding a new discrepancy\r\n            if (existingDiscrepancyIndex > -1) { return; }\r\n        }        \r\n        \r\n        let newDiscrepancy : Discrepancy = {\r\n            DiscrepancyID: poNumber+'-'+discrepancyType.toString()+'-'+stageType.toString()+'-'+importedRecordID+'-'+itemID,\r\n            DiscrepancyType: discrepancyType,\r\n            StageType: stageType,\r\n            RecordID: importedRecordID,\r\n            ItemID: itemID,\r\n            ExpectedQuantity: expectedQuantity,\r\n            ObservedQuantity: observedQuantity,\r\n            PONumber: poNumber\r\n        } as Discrepancy;\r\n\r\n        this.ap.addStageDiscrepancy(stageType, newDiscrepancy);\r\n    }\r\n\r\n\r\n\r\n}"]}