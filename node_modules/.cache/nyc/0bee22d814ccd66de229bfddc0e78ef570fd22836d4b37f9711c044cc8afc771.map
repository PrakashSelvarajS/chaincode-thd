{"version":3,"file":"C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\unit-of-measure-contract.spec.ts","sources":["C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\unit-of-measure-contract.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Context } from 'fabric-contract-api';\r\nimport { ChaincodeStub, ClientIdentity, Iterators } from 'fabric-shim';\r\nimport { testPDCName } from './___test-helper';\r\n\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport * as chai from 'chai';\r\nimport * as chaiAsPromised from 'chai-as-promised';\r\nimport * as sinon from 'sinon';\r\nimport * as sinonChai from 'sinon-chai';\r\nimport winston = require('winston');\r\n\r\nchai.should();\r\nchai.use(chaiAsPromised);\r\nchai.use(sinonChai);\r\n\r\nclass TestContext implements Context {\r\n    public stub: sinon.SinonStubbedInstance<ChaincodeStub> = sinon.createStubInstance(ChaincodeStub);\r\n    public clientIdentity: sinon.SinonStubbedInstance<ClientIdentity> = sinon.createStubInstance(ClientIdentity);\r\n    public logging = {\r\n        getLogger: sinon.stub().returns(sinon.createStubInstance(winston.createLogger().constructor)),\r\n        setLevel: sinon.stub(),\r\n     };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { UnitOfMeasureContract } from '../contracts/unit-of-measure.contract';\r\nimport { UnitOfMeasure, UnitOfMeasureList } from '../models';\r\n\r\ndescribe('UnitOfMeasureContract', () => {\r\n\r\n    let contract: UnitOfMeasureContract;\r\n    let ctx: TestContext;\r\n\r\n    let sampleUOM : UnitOfMeasure[] = [];\r\n\r\n    beforeEach(() => {\r\n        // Prepare the Contract and Context\r\n        contract = new UnitOfMeasureContract();\r\n        ctx = new TestContext();\r\n        ctx.clientIdentity.getMSPID.returns('Org1MSP');\r\n\r\n        // Load the sample data file\r\n        sampleUOM = [\r\n            {\r\n                \"RecordID\": \"DOES_EXIST\",\r\n                \"Description\": \"\",\r\n                \"SKU\": \"YYYYYYY\",\r\n                \"SKUGTIN\": \"\",\r\n                \"UnitHeight\": 100.00,\r\n                \"UnitLength\": 200.00,\r\n                \"UnitVolume\": 300.00,\r\n                \"UnitWeight\": 400.00,\r\n                \"UnitWidth\":  500.00,\r\n                \"UnitCost\": 0,\r\n                \"PalletCount\": 0,\r\n                \"CaseCount\": 1,\r\n                \"PackCount\": 1,\r\n                \"EachCount\": 3,\r\n                \"OtherCount\": 0,\r\n                \"UpdateDate\": 17012020,\r\n                \"OrderStandard\": \"Each\"\r\n\r\n            }\r\n        ] as UnitOfMeasure[];\r\n\r\n        // Add Vendor List record, and record composite key creator\r\n        ctx.stub.createCompositeKey.withArgs('uom', ['DEFAULT']).returns(' uom DEFAULT');\r\n        ctx.stub.getPrivateData.withArgs(testPDCName, ' uom DEFAULT').resolves(Buffer.from(JSON.stringify(new UnitOfMeasureList({ Items: sampleUOM }))));\r\n\r\n        // Add all records for the find search\r\n        let iterator : Iterators.StateQueryIterator = {\r\n            close: async () => { return; },\r\n            next: async () => { \r\n                iterator['currentIndex']++;\r\n                return {\r\n                    value : {\r\n                        key: 'uom',\r\n                        value: Buffer.from(JSON.stringify(iterator['allItems'][iterator['currentIndex']])),\r\n                        getKey: ()=>'uom',\r\n                        getValue: ()=>Buffer.from(JSON.stringify(sampleUOM))\r\n                    } as Iterators.KV,\r\n                    done : (iterator['allItems'].length == iterator['currentIndex']+1)\r\n                } as Iterators.NextResult; \r\n            }\r\n        } as Iterators.StateQueryIterator;\r\n\r\n        iterator['allItems'] = sampleUOM;\r\n        iterator['currentIndex'] = -1;\r\n\r\n        ctx.stub.getPrivateDataByPartialCompositeKey.withArgs(testPDCName, 'uom', []).resolves(iterator);\r\n    });\r\n\r\n    describe('#saveUnitOfMeasure', () => {\r\n\r\n        it('should create a unit of measure', async () => {\r\n            let newUOM : UnitOfMeasure = {\r\n                RecordID: 'DOES_NOT_EXIST',\r\n                Description: '',\r\n                SKU: 'XXXXXXX',\r\n                SKUGTIN: '',\r\n                UnitHeight: 100,\r\n                UnitLength: 200,\r\n                UnitVolume: 300,\r\n                UnitWeight: 400,\r\n                UnitWidth:  500\r\n            } as UnitOfMeasure;\r\n\r\n            let resultUOM : UnitOfMeasure[] = await contract.saveUnitOfMeasure(ctx, [newUOM]);\r\n\r\n            let finalUOM : UnitOfMeasure[] = [];\r\n\r\n            finalUOM = [\r\n                {\r\n                    \"RecordID\": \"DOES_EXIST\",\r\n                    \"Description\": \"\",\r\n                    \"SKU\": \"YYYYYYY\",\r\n                    \"SKUGTIN\": \"\",\r\n                    \"UnitHeight\": 100.00,\r\n                    \"UnitLength\": 200.00,\r\n                    \"UnitVolume\": 300.00,\r\n                    \"UnitWeight\": 400.00,\r\n                    \"UnitWidth\":  500.00,\r\n                    \"UnitCost\": 0,\r\n                    \"PalletCount\": 0,\r\n                    \"CaseCount\": 1,\r\n                    \"PackCount\": 1,\r\n                    \"EachCount\": 3,\r\n                    \"OtherCount\": 0,\r\n                    \"UpdateDate\": 17012020,\r\n                    \"OrderStandard\": \"Each\"\r\n                },\r\n                {\r\n                    \"RecordID\": \"DOES_NOT_EXIST\",\r\n                    \"Description\": \"\",\r\n                    \"SKU\": \"XXXXXXX\",\r\n                    \"SKUGTIN\": \"\",\r\n                    \"UnitHeight\": 100,\r\n                    \"UnitLength\": 200,\r\n                    \"UnitVolume\": 300,\r\n                    \"UnitWeight\": 400,\r\n                    \"UnitWidth\": 500\r\n                  }\r\n            ] as UnitOfMeasure[];\r\n\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWithExactly(testPDCName, ' uom DEFAULT', Buffer.from(JSON.stringify(new UnitOfMeasureList({ Items: finalUOM }))));\r\n            chai.expect(resultUOM).to.deep.equal([newUOM]);\r\n        });\r\n\r\n        it('should update a unit of measure', async () => {\r\n            let updatedUOM : UnitOfMeasure = {\r\n                RecordID: 'DOES_EXIST',\r\n                Description: 'UPDATED DESCRIPTION',\r\n                SKU: 'YYYYYYY',\r\n                SKUGTIN: 'UPDATED SKUGTIN',\r\n                UnitHeight: 111.11,\r\n                UnitLength: 222.22,\r\n                UnitVolume: 333.33,\r\n                UnitWeight: 444.44,\r\n                UnitWidth:  555.55\r\n            } as UnitOfMeasure;\r\n\r\n            let resultUOM : UnitOfMeasure[] = await contract.saveUnitOfMeasure(ctx, [updatedUOM]);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWithExactly(testPDCName, ' uom DEFAULT', Buffer.from(JSON.stringify(new UnitOfMeasureList({ Items: [updatedUOM] }))));\r\n            chai.expect(resultUOM).to.deep.equal([updatedUOM]);\r\n        });\r\n\r\n    });\r\n\r\n    describe('#retrieveUnitOfMeasure', () => {\r\n        it('should return all UOM data', async () => {\r\n            await contract.retrieveUnitOfMeasure(ctx).should.eventually.deep.equal(sampleUOM);\r\n        });\r\n    });\r\n\r\n\r\n});\r\n"]}