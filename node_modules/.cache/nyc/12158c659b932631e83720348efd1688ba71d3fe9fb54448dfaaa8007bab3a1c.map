{"version":3,"file":"C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\decorators\\repository.decorator.ts","sources":["C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\decorators\\repository.decorator.ts"],"names":[],"mappings":";;AAEA,MAAM,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACpC,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,sCAAsC,CAAC,CAAC;AACxE,4BAA0B;AAI1B,MAAM,sBAAsB,GAAmC,IAAI,GAAG,EAA4B,CAAC;AASnG,SAAgB,UAAU,CAAC,SAA4B,EAAE,UAAU,EAAE,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE;IAC3G,OAAO,CAAC,WAAsB,EAAE,EAAE;QAC9B,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,aAAa,MAAM,GAAG,EAAE,WAAW,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;QAEzF,wCAAwC;QACxC,IAAI,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,MAAM,CAAC,UAAU,KAAK,IAAI,EAAE;YAC/D,MAAM,CAAC,KAAK,CAAC,0BAA0B,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;YAC5D,MAAM,CAAC,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC;SACxC;QACD,IAAI,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,MAAM,CAAC,UAAU,KAAK,IAAI,EAAE;YAC/D,MAAM,CAAC,UAAU,GAAG,KAAK,CAAC;SAC7B;QACD,IAAI,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,KAAK,SAAS,IAAI,MAAM,CAAC,WAAW,KAAK,IAAI,CAAC,EAAE;YACjG,MAAM,CAAC,WAAW,GAAG,iBAAiB,CAAC;SAC1C;QAED,kGAAkG;QAClG,MAAM,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC;QAE7B,qCAAqC;QACrC,sBAAsB,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;QAErC,oEAAoE;QACpE,WAAW,CAAC,SAAS,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACrD,WAAW,CAAC,SAAS,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACrD,WAAW,CAAC,SAAS,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;IAC3D,CAAC,CAAC;AACN,CAAC;AA3BD,gCA2BC;AAAA,CAAC;AAIF,KAAK,UAAU,iBAAiB,CAAC,GAAW;IACxC,OAAO,aAAa,GAAG,GAAG,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC;AACzD,CAAC","sourcesContent":["\r\n\r\nconst Logger = require('../logger');\r\nconst logger = Logger.getLogger('./decorators/repository.decorator.ts');\r\nimport 'reflect-metadata';\r\nimport { Context } from 'fabric-contract-api';\r\n\r\n\r\nconst ALL_REPOSITORY_CONFIGS : Map<Symbol, RepositoryConfig> = new Map<Symbol, RepositoryConfig>();\r\n\r\n\r\nexport interface RepositoryConfig {\r\n    objectType: string;\r\n    requirePDC: boolean;\r\n    pdcResolver?: (ctx:Context)=>Promise<string>;\r\n}\r\n\r\nexport function Repository(config : RepositoryConfig = { objectType: '', requirePDC: false, pdcResolver: null }) {\r\n    return (constructor : Function) => {\r\n        logger.debug('@Repository args:', `config -> ${config},`, 'Target ->', constructor.name);\r\n\r\n        // Sanity checks for the provided config\r\n        if (config.objectType === undefined || config.objectType === null) {\r\n            logger.debug('DECORATOR: target.name =' + constructor.name);\r\n            config.objectType = constructor.name;\r\n        }\r\n        if (config.requirePDC === undefined || config.requirePDC === null) {\r\n            config.requirePDC = false;\r\n        }\r\n        if (config.requirePDC === true && (config.pdcResolver === undefined || config.pdcResolver === null)) {\r\n            config.pdcResolver = getCurrentPDCName;\r\n        }\r\n\r\n        // Create a key for storing the config for this instance using the target name and the propertyKey\r\n        const key = constructor.name;\r\n\r\n        // Store the config for this instance\r\n        ALL_REPOSITORY_CONFIGS[key] = config;\r\n\r\n        // Store the individual config values as part of the class prototype\r\n        constructor.prototype.objectType = config.objectType;\r\n        constructor.prototype.requirePDC = config.requirePDC;\r\n        constructor.prototype.pdcResolver = config.pdcResolver;\r\n    };\r\n};\r\n\r\n\r\n\r\nasync function getCurrentPDCName(ctx:Context) : Promise<string> {\r\n    return 'collection_' + ctx.clientIdentity.getMSPID();\r\n}"]}