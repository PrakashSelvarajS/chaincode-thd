{"version":3,"file":"C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\contracts\\vendor.contract.ts","sources":["C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\contracts\\vendor.contract.ts"],"names":[],"mappings":"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","sourcesContent":["import { Context, Contract, Info, Returns, Transaction, Param } from 'fabric-contract-api';\r\nimport { Vendor, VendorList } from \"../models\";\r\nimport { VendorListRepository } from '../repositories';\r\n\r\n\r\n\r\n\r\n@Info({ title: 'VendorContract', description: 'Contract for managing the list of \"Vendor\" (and sub-vendor) identification data for a Vendor' })\r\nexport class VendorContract extends Contract {\r\n\r\n\r\n    constructor() { super(\"com.homedepot.procurement.VendorContract\"); }\r\n\r\n    // Used to merge new Vendor data with existing Vendor data\r\n    @Transaction(true)\r\n    @Param(\"newVendors\", \"Vendor[]\")\r\n    @Returns('Vendor[]')\r\n    public async saveVendor(ctx: Context, newVendors: Vendor[]): Promise<Vendor[]> {\r\n        // Clean up the Vendor names to remove double quotes and trailing/leading spaces\r\n        newVendors = newVendors.map((v,i,l) => {\r\n            v.Name = v.Name.replace(/[\"]+/g, '').trim();\r\n            return v; \r\n        });\r\n\r\n        const repo : VendorListRepository = new VendorListRepository(ctx);\r\n\r\n        // Get the list of existing Vendor items\r\n        const existingVendorList : VendorList = await repo.get();\r\n        let savedVendors : Vendor[] = [];\r\n\r\n        // If there are no existing Vendor items, then store the new Vendor list\r\n        if (existingVendorList === undefined || existingVendorList.Items === undefined || existingVendorList.Items.length === 0) {\r\n            console.log('No Vendor data, adding all the provided Vendor data to the ledger');\r\n            let newVendorList : VendorList = new VendorList({Items: newVendors});\r\n            await repo.create(newVendorList);\r\n            savedVendors = newVendorList.Items;\r\n        } else {\r\n            // Merge the existing Vendor with the new Vendor, using SKU as a unique identifier\r\n            for (let currentNewVendor of newVendors) {                 \r\n                const existingItemIndex : number = existingVendorList.Items.findIndex((vv,ii,ll)=>{ return currentNewVendor.VendorID == vv.VendorID; });\r\n\r\n                if(existingItemIndex > -1 ){                    \r\n                    // Overwrite the existing item values with the new values                    \r\n                    currentNewVendor.RecordID = existingVendorList.Items[existingItemIndex].RecordID;\r\n                    existingVendorList.Items[existingItemIndex] = currentNewVendor;\r\n                    savedVendors.push(currentNewVendor);\r\n                }\r\n            }\r\n\r\n            // Get a list of records that are in the new list, but not in the existing list\r\n            let newVendorNotInExistingList : Vendor[] = newVendors.filter((v,i,l)=>{ return (existingVendorList.Items.findIndex((vv,ii,ll)=> { return v.VendorID == vv.VendorID; }) == -1); });\r\n            if (newVendorNotInExistingList.length > 0) {\r\n                existingVendorList.Items.push(...newVendorNotInExistingList);\r\n                savedVendors.push(...newVendorNotInExistingList)\r\n            }\r\n\r\n            // HACK : This is a temporary fix to remove double-quotes from all Vendor names....this should be removed after all entries have been fixed in the blockchain\r\n            existingVendorList.Items = existingVendorList.Items.map((v,i,l)=>{\r\n                v.Name = v.Name.replace(/[\"]+/g, '').trim();\r\n                return v;\r\n            });\r\n\r\n            await repo.update(existingVendorList);\r\n        }\r\n\r\n        return savedVendors;\r\n    }\r\n\r\n    // Delete an existing Vendor record by its SKU\r\n    public async deleteVendor(ctx: Context, sku: string) : Promise<boolean> {\r\n        throw new Error('ERROR: deleteVendor has not been implemented');\r\n    }\r\n    \r\n\r\n\r\n    @Transaction(false)\r\n    @Returns('Vendor[]')\r\n    public async retrieveVendor(ctx: Context): Promise<Vendor[]> {\r\n        let repo : VendorListRepository = new VendorListRepository(ctx);\r\n        const vendorList : VendorList = await repo.get();\r\n        if (vendorList === undefined || vendorList.Items === undefined || vendorList.Items.length == 0) {\r\n            throw new Error(`ERROR: No Vendors exist in the blockchain for this Vendor`);\r\n        } else {\r\n            return vendorList.Items;\r\n        }\r\n    }\r\n\r\n}"]}