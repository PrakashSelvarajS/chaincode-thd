{"version":3,"file":"C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\vendor-shipped-contract.spec.ts","sources":["C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\vendor-shipped-contract.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { TestHelper, TestContext, testPDCName } from './___test-helper';\r\n\r\nimport * as chai from 'chai';\r\nimport * as chaiAsPromised from 'chai-as-promised';\r\nimport * as sinon from 'sinon';\r\nimport * as sinonChai from 'sinon-chai';\r\nimport winston = require('winston');\r\n\r\nchai.should();\r\nchai.use(chaiAsPromised);\r\nchai.use(sinonChai);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { VendorShippedContract } from '..';\r\nimport { VendorShipped, AssetProcurement, UnitOfMeasure, Discrepancy, DiscrepancyType, StageType } from '../models';\r\n\r\nconst objectType : string = ' ap ';\r\nconst testconfigSubFolder : string = 'vendorShipped';\r\n\r\ndescribe('VendorShippedContract', () => {\r\n\r\n    let contract: VendorShippedContract;\r\n    let ctx: TestContext;\r\n\r\n    beforeEach(() => {\r\n        // Prepare the Contract and Context\r\n        contract = new VendorShippedContract();\r\n        ctx = new TestContext();\r\n    });\r\n\r\n    describe('#saveVendorShipped', () => {\r\n\r\n        it('BR-VS-001 should create a procurement record for new poNumbers', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-VS-001', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveVendorShipped(ctx, testConfig.input.PONumber, testConfig.input.VendorShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-VS-002 should add unique new Vendor Shipped data into previous imported data', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-VS-002', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveVendorShipped(ctx, testConfig.input.PONumber, testConfig.input.VendorShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-VS-003 should replace matching, existing Vendor Shipped data with new imported data', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-VS-003', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveVendorShipped(ctx, testConfig.input.PONumber, testConfig.input.VendorShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-VS-004 should uniquely identify Vendor Shipped data for matching new data with existing data', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-VS-004', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveVendorShipped(ctx, testConfig.input.PONumber, testConfig.input.VendorShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-VS-005 should aggregate Quantity of a SKU on the same UCC128, destined for the same RDC', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-VS-005', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveVendorShipped(ctx, testConfig.input.PONumber, testConfig.input.VendorShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-VS-006 should flag when the PurchaseOrder data is missing for this PO Number (Missing PO)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-VS-006', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveVendorShipped(ctx, testConfig.input.PONumber, testConfig.input.VendorShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-VS-007 should flag when the Vendor shipped a SKU that was not on the PO (Wrong SKU)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-VS-007', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveVendorShipped(ctx, testConfig.input.PONumber, testConfig.input.VendorShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-VS-008 should flag when the Vendor shipped an item that does not include a SKU (Blank SKU at Vendor Shipped)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-VS-008', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveVendorShipped(ctx, testConfig.input.PONumber, testConfig.input.VendorShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-VS-009 should flag when the Vendor specified a SKU destined for an RDC different from PO (Wrong RDC)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-VS-009', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveVendorShipped(ctx, testConfig.input.PONumber, testConfig.input.VendorShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-VS-010 should flag when the Vendor shipped less SKU Quantity than PO (Fill Shortage)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-VS-010', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveVendorShipped(ctx, testConfig.input.PONumber, testConfig.input.VendorShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-VS-011 should flag when the Vendor shipped more  SKU Quantity than PO (Fill Overage)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-VS-011', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveVendorShipped(ctx, testConfig.input.PONumber, testConfig.input.VendorShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n\r\n    });\r\n\r\n});\r\n\r\n"]}