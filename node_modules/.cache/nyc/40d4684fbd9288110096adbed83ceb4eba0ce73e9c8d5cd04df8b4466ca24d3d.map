{"version":3,"file":"C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\ifc-staged-contract.spec.ts","sources":["C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\ifc-staged-contract.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { TestHelper, TestContext, testPDCName } from './___test-helper';\r\n\r\nimport * as chai from 'chai';\r\nimport * as chaiAsPromised from 'chai-as-promised';\r\nimport * as sinon from 'sinon';\r\nimport * as sinonChai from 'sinon-chai';\r\nimport winston = require('winston');\r\n\r\nchai.should();\r\nchai.use(chaiAsPromised);\r\nchai.use(sinonChai);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { IFCStagedContract } from '..';\r\nimport { IFCStaged, AssetProcurement, UnitOfMeasure, Discrepancy, DiscrepancyType, StageType } from '../models';\r\n\r\nconst objectType : string = ' ap ';\r\nconst testconfigSubFolder : string = 'ifcStaged';\r\n\r\ndescribe('IFCStagedContract', () => {\r\n\r\n    let contract: IFCStagedContract;\r\n    let ctx: TestContext;\r\n\r\n    beforeEach(() => {\r\n        // Prepare the Contract and Context\r\n        contract = new IFCStagedContract();\r\n        ctx = new TestContext();\r\n    });\r\n\r\n    describe('#saveIFCStaged', () => {\r\n\r\n        it('BR-IST-001 should create a procurement record for new poNumbers', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IST-001', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCStaged(ctx, testConfig.input.PONumber, testConfig.input.IFCStageds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IST-002 should add unique new IFC Staged data into previous imported data', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IST-002', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCStaged(ctx, testConfig.input.PONumber, testConfig.input.IFCStageds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IST-003 should replace matching, existing IFC Staged data with new imported data', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IST-003', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCStaged(ctx, testConfig.input.PONumber, testConfig.input.IFCStageds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IST-004 should uniquely identify IFC Staged data for matching new data with existing data', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IST-004', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCStaged(ctx, testConfig.input.PONumber, testConfig.input.IFCStageds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IST-005 should aggregate Quantity of a SKU on the same UCC128, destined for the same RDC', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IST-005', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCStaged(ctx, testConfig.input.PONumber, testConfig.input.IFCStageds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IST-006 should flag when the PurchaseOrder data is missing for this PO Number (Missing PO)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IST-006', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCStaged(ctx, testConfig.input.PONumber, testConfig.input.IFCStageds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IST-007 should flag when the Vendor Shipped data is missing for this PO Number (Missing Vendor Shipped)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IST-007', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCStaged(ctx, testConfig.input.PONumber, testConfig.input.IFCStageds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IST-008 should flag when the IFC staged a SKU from Vendor that was not on the PO (Wrong SKU)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IST-008', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCStaged(ctx, testConfig.input.PONumber, testConfig.input.IFCStageds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IST-009 should flag when the IFC staged a SKU destined for an RDC different from PO (Wrong RDC)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IST-009', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCStaged(ctx, testConfig.input.PONumber, testConfig.input.IFCStageds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IST-010 should flag when the IFC staged less SKU Quantity from Vendor than Vendor Shipped (Shortage)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IST-010', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCStaged(ctx, testConfig.input.PONumber, testConfig.input.IFCStageds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IST-011 should flag when the IFC staged more SKU Quantity from Vendor than Vendor Shipped (Overage)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IST-011', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCStaged(ctx, testConfig.input.PONumber, testConfig.input.IFCStageds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IST-012 should flag when the IFC did not receive a UCC for an RDC, from the Vendor (Missing Pallet)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IST-012', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCStaged(ctx, testConfig.input.PONumber, testConfig.input.IFCStageds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IST-013 should flag when the IFC received any extra UCC’s for the RDC, from the Vendor (Additional Pallet)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IST-013', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCStaged(ctx, testConfig.input.PONumber, testConfig.input.IFCStageds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n    });\r\n\r\n});\r\n\r\n"]}