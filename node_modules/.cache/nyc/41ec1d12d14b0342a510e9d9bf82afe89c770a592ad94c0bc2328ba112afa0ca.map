{"version":3,"file":"C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\ifc-shipped-contract.spec.ts","sources":["C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\ifc-shipped-contract.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { TestHelper, TestContext, testPDCName } from './___test-helper';\r\n\r\nimport * as chai from 'chai';\r\nimport * as chaiAsPromised from 'chai-as-promised';\r\nimport * as sinon from 'sinon';\r\nimport * as sinonChai from 'sinon-chai';\r\nimport winston = require('winston');\r\n\r\nchai.should();\r\nchai.use(chaiAsPromised);\r\nchai.use(sinonChai);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { IFCShippedContract } from '..';\r\nimport { IFCShipped, AssetProcurement, UnitOfMeasure, Discrepancy, DiscrepancyType, StageType } from '../models';\r\n\r\nconst objectType : string = ' ap ';\r\nconst testconfigSubFolder : string = 'ifcShipped';\r\n\r\ndescribe('IFCShippedContract', () => {\r\n\r\n    let contract: IFCShippedContract;\r\n    let ctx: TestContext;\r\n\r\n    beforeEach(() => {\r\n        // Prepare the Contract and Context\r\n        contract = new IFCShippedContract();\r\n        ctx = new TestContext();\r\n    });\r\n\r\n    describe('#saveIFCShipped', () => {\r\n\r\n        it('BR-ISH-001 should create a procurement record for new poNumbers', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-ISH-001', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCShipped(ctx, testConfig.input.PONumber, testConfig.input.IFCShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-ISH-002 should add unique new IFC Shipped data into previous imported data', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-ISH-002', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCShipped(ctx, testConfig.input.PONumber, testConfig.input.IFCShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-ISH-003 should replace matching, existing IFC Shipped data with new imported data', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-ISH-003', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCShipped(ctx, testConfig.input.PONumber, testConfig.input.IFCShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-ISH-004 should uniquely identify IFC Shipped data for matching new data with existing data', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-ISH-004', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCShipped(ctx, testConfig.input.PONumber, testConfig.input.IFCShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-ISH-005 should aggregate Quantity of a SKU destined for the same RDC, when determining Shortage / Overage', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-ISH-005', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCShipped(ctx, testConfig.input.PONumber, testConfig.input.IFCShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-ISH-006 should flag when the Purchase Order data is missing for this PO Number (Missing PO)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-ISH-006', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCShipped(ctx, testConfig.input.PONumber, testConfig.input.IFCShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-ISH-007 should flag when the Vendor Shipped data is missing for this PO Number (Missing Vendor Shipped)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-ISH-007', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCShipped(ctx, testConfig.input.PONumber, testConfig.input.IFCShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-ISH-008 should flag when the IFC shipped a SKU from Vendor that was not on the PO (Wrong SKU)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-ISH-008', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCShipped(ctx, testConfig.input.PONumber, testConfig.input.IFCShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-ISH-009 should flag when the IFC shipped a SKU destined for an RDC different from PO (Wrong RDC)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-ISH-009', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCShipped(ctx, testConfig.input.PONumber, testConfig.input.IFCShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-ISH-010 should flag when the IFC shipped less SKU Quantity from Vendor than Vendor Shipped (Shortage)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-ISH-010', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCShipped(ctx, testConfig.input.PONumber, testConfig.input.IFCShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-ISH-011 should flag when the IFC shipped more SKU Quantity from Vendor than Vendor Shipped (Overage)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-ISH-011', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCShipped(ctx, testConfig.input.PONumber, testConfig.input.IFCShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n    });\r\n\r\n});\r\n\r\n"]}