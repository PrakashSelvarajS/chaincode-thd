"use strict";var cov_13piw0poaq=function(){var path="C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\ifc-shipped-contract.spec.ts";var hash="9dc9c1419114a6e304249a7d12b010bb2a59825d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\ifc-shipped-contract.spec.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:25},end:{line:3,column:52}},"2":{start:{line:4,column:13},end:{line:4,column:28}},"3":{start:{line:5,column:23},end:{line:5,column:50}},"4":{start:{line:6,column:18},end:{line:6,column:39}},"5":{start:{line:7,column:0},end:{line:7,column:14}},"6":{start:{line:8,column:0},end:{line:8,column:25}},"7":{start:{line:9,column:0},end:{line:9,column:20}},"8":{start:{line:10,column:12},end:{line:10,column:25}},"9":{start:{line:11,column:19},end:{line:11,column:25}},"10":{start:{line:12,column:28},end:{line:12,column:40}},"11":{start:{line:13,column:0},end:{line:89,column:3}},"12":{start:{line:16,column:4},end:{line:20,column:7}},"13":{start:{line:18,column:8},end:{line:18,column:48}},"14":{start:{line:19,column:8},end:{line:19,column:49}},"15":{start:{line:21,column:4},end:{line:88,column:7}},"16":{start:{line:22,column:8},end:{line:27,column:11}},"17":{start:{line:23,column:29},end:{line:23,column:113}},"18":{start:{line:24,column:27},end:{line:24,column:118}},"19":{start:{line:25,column:12},end:{line:25,column:186}},"20":{start:{line:26,column:12},end:{line:26,column:67}},"21":{start:{line:28,column:8},end:{line:33,column:11}},"22":{start:{line:29,column:29},end:{line:29,column:113}},"23":{start:{line:30,column:27},end:{line:30,column:118}},"24":{start:{line:31,column:12},end:{line:31,column:186}},"25":{start:{line:32,column:12},end:{line:32,column:67}},"26":{start:{line:34,column:8},end:{line:39,column:11}},"27":{start:{line:35,column:29},end:{line:35,column:113}},"28":{start:{line:36,column:27},end:{line:36,column:118}},"29":{start:{line:37,column:12},end:{line:37,column:186}},"30":{start:{line:38,column:12},end:{line:38,column:67}},"31":{start:{line:40,column:8},end:{line:45,column:11}},"32":{start:{line:41,column:29},end:{line:41,column:113}},"33":{start:{line:42,column:27},end:{line:42,column:118}},"34":{start:{line:43,column:12},end:{line:43,column:186}},"35":{start:{line:44,column:12},end:{line:44,column:67}},"36":{start:{line:46,column:8},end:{line:51,column:11}},"37":{start:{line:47,column:29},end:{line:47,column:113}},"38":{start:{line:48,column:27},end:{line:48,column:118}},"39":{start:{line:49,column:12},end:{line:49,column:186}},"40":{start:{line:50,column:12},end:{line:50,column:67}},"41":{start:{line:52,column:8},end:{line:57,column:11}},"42":{start:{line:53,column:29},end:{line:53,column:113}},"43":{start:{line:54,column:27},end:{line:54,column:118}},"44":{start:{line:55,column:12},end:{line:55,column:186}},"45":{start:{line:56,column:12},end:{line:56,column:67}},"46":{start:{line:58,column:8},end:{line:63,column:11}},"47":{start:{line:59,column:29},end:{line:59,column:113}},"48":{start:{line:60,column:27},end:{line:60,column:118}},"49":{start:{line:61,column:12},end:{line:61,column:186}},"50":{start:{line:62,column:12},end:{line:62,column:67}},"51":{start:{line:64,column:8},end:{line:69,column:11}},"52":{start:{line:65,column:29},end:{line:65,column:113}},"53":{start:{line:66,column:27},end:{line:66,column:118}},"54":{start:{line:67,column:12},end:{line:67,column:186}},"55":{start:{line:68,column:12},end:{line:68,column:67}},"56":{start:{line:70,column:8},end:{line:75,column:11}},"57":{start:{line:71,column:29},end:{line:71,column:113}},"58":{start:{line:72,column:27},end:{line:72,column:118}},"59":{start:{line:73,column:12},end:{line:73,column:186}},"60":{start:{line:74,column:12},end:{line:74,column:67}},"61":{start:{line:76,column:8},end:{line:81,column:11}},"62":{start:{line:77,column:29},end:{line:77,column:113}},"63":{start:{line:78,column:27},end:{line:78,column:118}},"64":{start:{line:79,column:12},end:{line:79,column:186}},"65":{start:{line:80,column:12},end:{line:80,column:67}},"66":{start:{line:82,column:8},end:{line:87,column:11}},"67":{start:{line:83,column:29},end:{line:83,column:113}},"68":{start:{line:84,column:27},end:{line:84,column:118}},"69":{start:{line:85,column:12},end:{line:85,column:186}},"70":{start:{line:86,column:12},end:{line:86,column:67}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:13,column:31},end:{line:13,column:32}},loc:{start:{line:13,column:37},end:{line:89,column:1}},line:13},"1":{name:"(anonymous_1)",decl:{start:{line:16,column:15},end:{line:16,column:16}},loc:{start:{line:16,column:21},end:{line:20,column:5}},line:16},"2":{name:"(anonymous_2)",decl:{start:{line:21,column:32},end:{line:21,column:33}},loc:{start:{line:21,column:38},end:{line:88,column:5}},line:21},"3":{name:"(anonymous_3)",decl:{start:{line:22,column:78},end:{line:22,column:79}},loc:{start:{line:22,column:90},end:{line:27,column:9}},line:22},"4":{name:"(anonymous_4)",decl:{start:{line:28,column:92},end:{line:28,column:93}},loc:{start:{line:28,column:104},end:{line:33,column:9}},line:28},"5":{name:"(anonymous_5)",decl:{start:{line:34,column:99},end:{line:34,column:100}},loc:{start:{line:34,column:111},end:{line:39,column:9}},line:34},"6":{name:"(anonymous_6)",decl:{start:{line:40,column:108},end:{line:40,column:109}},loc:{start:{line:40,column:120},end:{line:45,column:9}},line:40},"7":{name:"(anonymous_7)",decl:{start:{line:46,column:123},end:{line:46,column:124}},loc:{start:{line:46,column:135},end:{line:51,column:9}},line:46},"8":{name:"(anonymous_8)",decl:{start:{line:52,column:109},end:{line:52,column:110}},loc:{start:{line:52,column:121},end:{line:57,column:9}},line:52},"9":{name:"(anonymous_9)",decl:{start:{line:58,column:121},end:{line:58,column:122}},loc:{start:{line:58,column:133},end:{line:63,column:9}},line:58},"10":{name:"(anonymous_10)",decl:{start:{line:64,column:111},end:{line:64,column:112}},loc:{start:{line:64,column:123},end:{line:69,column:9}},line:64},"11":{name:"(anonymous_11)",decl:{start:{line:70,column:114},end:{line:70,column:115}},loc:{start:{line:70,column:126},end:{line:75,column:9}},line:70},"12":{name:"(anonymous_12)",decl:{start:{line:76,column:119},end:{line:76,column:120}},loc:{start:{line:76,column:131},end:{line:81,column:9}},line:76},"13":{name:"(anonymous_13)",decl:{start:{line:82,column:118},end:{line:82,column:119}},loc:{start:{line:82,column:130},end:{line:87,column:9}},line:82}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"9dc9c1419114a6e304249a7d12b010bb2a59825d"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();cov_13piw0poaq.s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const ___test_helper_1=(cov_13piw0poaq.s[1]++,require("./___test-helper"));const chai=(cov_13piw0poaq.s[2]++,require("chai"));const chaiAsPromised=(cov_13piw0poaq.s[3]++,require("chai-as-promised"));const sinonChai=(cov_13piw0poaq.s[4]++,require("sinon-chai"));cov_13piw0poaq.s[5]++;chai.should();cov_13piw0poaq.s[6]++;chai.use(chaiAsPromised);cov_13piw0poaq.s[7]++;chai.use(sinonChai);const __1=(cov_13piw0poaq.s[8]++,require(".."));const objectType=(cov_13piw0poaq.s[9]++,' ap ');const testconfigSubFolder=(cov_13piw0poaq.s[10]++,'ifcShipped');cov_13piw0poaq.s[11]++;describe('IFCShippedContract',()=>{cov_13piw0poaq.f[0]++;let contract;let ctx;cov_13piw0poaq.s[12]++;beforeEach(()=>{cov_13piw0poaq.f[1]++;cov_13piw0poaq.s[13]++;// Prepare the Contract and Context
contract=new __1.IFCShippedContract();cov_13piw0poaq.s[14]++;ctx=new ___test_helper_1.TestContext();});cov_13piw0poaq.s[15]++;describe('#saveIFCShipped',()=>{cov_13piw0poaq.f[2]++;cov_13piw0poaq.s[16]++;it('BR-ISH-001 should create a procurement record for new poNumbers',async()=>{cov_13piw0poaq.f[3]++;let testConfig=(cov_13piw0poaq.s[17]++,___test_helper_1.TestHelper.loadAPTestConfig('BR-ISH-001',ctx,testconfigSubFolder));let resultAP=(cov_13piw0poaq.s[18]++,await contract.saveIFCShipped(ctx,testConfig.input.PONumber,testConfig.input.IFCShippeds));cov_13piw0poaq.s[19]++;ctx.stub.putPrivateData.should.have.been.calledOnceWith(___test_helper_1.testPDCName,objectType+testConfig.input.PONumber,Buffer.from(JSON.stringify(testConfig.output)));cov_13piw0poaq.s[20]++;chai.expect(testConfig.output).to.deep.equal(resultAP);});cov_13piw0poaq.s[21]++;it('BR-ISH-002 should add unique new IFC Shipped data into previous imported data',async()=>{cov_13piw0poaq.f[4]++;let testConfig=(cov_13piw0poaq.s[22]++,___test_helper_1.TestHelper.loadAPTestConfig('BR-ISH-002',ctx,testconfigSubFolder));let resultAP=(cov_13piw0poaq.s[23]++,await contract.saveIFCShipped(ctx,testConfig.input.PONumber,testConfig.input.IFCShippeds));cov_13piw0poaq.s[24]++;ctx.stub.putPrivateData.should.have.been.calledOnceWith(___test_helper_1.testPDCName,objectType+testConfig.input.PONumber,Buffer.from(JSON.stringify(testConfig.output)));cov_13piw0poaq.s[25]++;chai.expect(testConfig.output).to.deep.equal(resultAP);});cov_13piw0poaq.s[26]++;it('BR-ISH-003 should replace matching, existing IFC Shipped data with new imported data',async()=>{cov_13piw0poaq.f[5]++;let testConfig=(cov_13piw0poaq.s[27]++,___test_helper_1.TestHelper.loadAPTestConfig('BR-ISH-003',ctx,testconfigSubFolder));let resultAP=(cov_13piw0poaq.s[28]++,await contract.saveIFCShipped(ctx,testConfig.input.PONumber,testConfig.input.IFCShippeds));cov_13piw0poaq.s[29]++;ctx.stub.putPrivateData.should.have.been.calledOnceWith(___test_helper_1.testPDCName,objectType+testConfig.input.PONumber,Buffer.from(JSON.stringify(testConfig.output)));cov_13piw0poaq.s[30]++;chai.expect(testConfig.output).to.deep.equal(resultAP);});cov_13piw0poaq.s[31]++;it('BR-ISH-004 should uniquely identify IFC Shipped data for matching new data with existing data',async()=>{cov_13piw0poaq.f[6]++;let testConfig=(cov_13piw0poaq.s[32]++,___test_helper_1.TestHelper.loadAPTestConfig('BR-ISH-004',ctx,testconfigSubFolder));let resultAP=(cov_13piw0poaq.s[33]++,await contract.saveIFCShipped(ctx,testConfig.input.PONumber,testConfig.input.IFCShippeds));cov_13piw0poaq.s[34]++;ctx.stub.putPrivateData.should.have.been.calledOnceWith(___test_helper_1.testPDCName,objectType+testConfig.input.PONumber,Buffer.from(JSON.stringify(testConfig.output)));cov_13piw0poaq.s[35]++;chai.expect(testConfig.output).to.deep.equal(resultAP);});cov_13piw0poaq.s[36]++;it('BR-ISH-005 should aggregate Quantity of a SKU destined for the same RDC, when determining Shortage / Overage',async()=>{cov_13piw0poaq.f[7]++;let testConfig=(cov_13piw0poaq.s[37]++,___test_helper_1.TestHelper.loadAPTestConfig('BR-ISH-005',ctx,testconfigSubFolder));let resultAP=(cov_13piw0poaq.s[38]++,await contract.saveIFCShipped(ctx,testConfig.input.PONumber,testConfig.input.IFCShippeds));cov_13piw0poaq.s[39]++;ctx.stub.putPrivateData.should.have.been.calledOnceWith(___test_helper_1.testPDCName,objectType+testConfig.input.PONumber,Buffer.from(JSON.stringify(testConfig.output)));cov_13piw0poaq.s[40]++;chai.expect(testConfig.output).to.deep.equal(resultAP);});cov_13piw0poaq.s[41]++;it('BR-ISH-006 should flag when the Purchase Order data is missing for this PO Number (Missing PO)',async()=>{cov_13piw0poaq.f[8]++;let testConfig=(cov_13piw0poaq.s[42]++,___test_helper_1.TestHelper.loadAPTestConfig('BR-ISH-006',ctx,testconfigSubFolder));let resultAP=(cov_13piw0poaq.s[43]++,await contract.saveIFCShipped(ctx,testConfig.input.PONumber,testConfig.input.IFCShippeds));cov_13piw0poaq.s[44]++;ctx.stub.putPrivateData.should.have.been.calledOnceWith(___test_helper_1.testPDCName,objectType+testConfig.input.PONumber,Buffer.from(JSON.stringify(testConfig.output)));cov_13piw0poaq.s[45]++;chai.expect(testConfig.output).to.deep.equal(resultAP);});cov_13piw0poaq.s[46]++;it('BR-ISH-007 should flag when the Vendor Shipped data is missing for this PO Number (Missing Vendor Shipped)',async()=>{cov_13piw0poaq.f[9]++;let testConfig=(cov_13piw0poaq.s[47]++,___test_helper_1.TestHelper.loadAPTestConfig('BR-ISH-007',ctx,testconfigSubFolder));let resultAP=(cov_13piw0poaq.s[48]++,await contract.saveIFCShipped(ctx,testConfig.input.PONumber,testConfig.input.IFCShippeds));cov_13piw0poaq.s[49]++;ctx.stub.putPrivateData.should.have.been.calledOnceWith(___test_helper_1.testPDCName,objectType+testConfig.input.PONumber,Buffer.from(JSON.stringify(testConfig.output)));cov_13piw0poaq.s[50]++;chai.expect(testConfig.output).to.deep.equal(resultAP);});cov_13piw0poaq.s[51]++;it('BR-ISH-008 should flag when the IFC shipped a SKU from Vendor that was not on the PO (Wrong SKU)',async()=>{cov_13piw0poaq.f[10]++;let testConfig=(cov_13piw0poaq.s[52]++,___test_helper_1.TestHelper.loadAPTestConfig('BR-ISH-008',ctx,testconfigSubFolder));let resultAP=(cov_13piw0poaq.s[53]++,await contract.saveIFCShipped(ctx,testConfig.input.PONumber,testConfig.input.IFCShippeds));cov_13piw0poaq.s[54]++;ctx.stub.putPrivateData.should.have.been.calledOnceWith(___test_helper_1.testPDCName,objectType+testConfig.input.PONumber,Buffer.from(JSON.stringify(testConfig.output)));cov_13piw0poaq.s[55]++;chai.expect(testConfig.output).to.deep.equal(resultAP);});cov_13piw0poaq.s[56]++;it('BR-ISH-009 should flag when the IFC shipped a SKU destined for an RDC different from PO (Wrong RDC)',async()=>{cov_13piw0poaq.f[11]++;let testConfig=(cov_13piw0poaq.s[57]++,___test_helper_1.TestHelper.loadAPTestConfig('BR-ISH-009',ctx,testconfigSubFolder));let resultAP=(cov_13piw0poaq.s[58]++,await contract.saveIFCShipped(ctx,testConfig.input.PONumber,testConfig.input.IFCShippeds));cov_13piw0poaq.s[59]++;ctx.stub.putPrivateData.should.have.been.calledOnceWith(___test_helper_1.testPDCName,objectType+testConfig.input.PONumber,Buffer.from(JSON.stringify(testConfig.output)));cov_13piw0poaq.s[60]++;chai.expect(testConfig.output).to.deep.equal(resultAP);});cov_13piw0poaq.s[61]++;it('BR-ISH-010 should flag when the IFC shipped less SKU Quantity from Vendor than Vendor Shipped (Shortage)',async()=>{cov_13piw0poaq.f[12]++;let testConfig=(cov_13piw0poaq.s[62]++,___test_helper_1.TestHelper.loadAPTestConfig('BR-ISH-010',ctx,testconfigSubFolder));let resultAP=(cov_13piw0poaq.s[63]++,await contract.saveIFCShipped(ctx,testConfig.input.PONumber,testConfig.input.IFCShippeds));cov_13piw0poaq.s[64]++;ctx.stub.putPrivateData.should.have.been.calledOnceWith(___test_helper_1.testPDCName,objectType+testConfig.input.PONumber,Buffer.from(JSON.stringify(testConfig.output)));cov_13piw0poaq.s[65]++;chai.expect(testConfig.output).to.deep.equal(resultAP);});cov_13piw0poaq.s[66]++;it('BR-ISH-011 should flag when the IFC shipped more SKU Quantity from Vendor than Vendor Shipped (Overage)',async()=>{cov_13piw0poaq.f[13]++;let testConfig=(cov_13piw0poaq.s[67]++,___test_helper_1.TestHelper.loadAPTestConfig('BR-ISH-011',ctx,testconfigSubFolder));let resultAP=(cov_13piw0poaq.s[68]++,await contract.saveIFCShipped(ctx,testConfig.input.PONumber,testConfig.input.IFCShippeds));cov_13piw0poaq.s[69]++;ctx.stub.putPrivateData.should.have.been.calledOnceWith(___test_helper_1.testPDCName,objectType+testConfig.input.PONumber,Buffer.from(JSON.stringify(testConfig.output)));cov_13piw0poaq.s[70]++;chai.expect(testConfig.output).to.deep.equal(resultAP);});});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,