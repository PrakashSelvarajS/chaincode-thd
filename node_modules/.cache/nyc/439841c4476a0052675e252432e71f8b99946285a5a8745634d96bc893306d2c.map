{"version":3,"file":"C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\adr-rule-contract.spec.ts","sources":["C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\adr-rule-contract.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { TestHelper, TestContext, testPDCName } from './___test-helper';\r\n\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport * as chai from 'chai';\r\nimport * as chaiAsPromised from 'chai-as-promised';\r\nimport * as sinon from 'sinon';\r\nimport * as sinonChai from 'sinon-chai';\r\nimport winston = require('winston');\r\n\r\nchai.should();\r\nchai.use(chaiAsPromised);\r\nchai.use(sinonChai);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { ADRRuleContract } from '..';\r\nimport { AssetProcurement, UnitOfMeasure, Discrepancy, DiscrepancyType, StageType, ADRRule, ADRRuleList } from '../models';\r\nimport { PurchaseOrderContract } from '../contracts/purchase-order.contract';\r\nimport { ChaincodeStub, ClientIdentity, Iterators } from 'fabric-shim';\r\nimport { VendorShippedContract } from '../contracts/vendor-shipped.contract';\r\n\r\nconst objectType : string = ' ap ';\r\nconst testconfigSubFolder : string = 'adrRules';\r\n\r\ndescribe('ADRRuleContract', () => {\r\n\r\n    let contract: ADRRuleContract;\r\n    let ctx: TestContext;\r\n\r\n    let sampleADRs : ADRRule[] = [];\r\n\r\n    beforeEach(() => {\r\n        // Prepare Context\r\n        contract = new ADRRuleContract();\r\n        ctx = new TestContext();\r\n        ctx.clientIdentity.getMSPID.returns('Org1MSP');\r\n\r\n        // Add each ADR record, and record composite key creator\r\n        sampleADRs = JSON.parse(fs.readFileSync(path.join(__dirname, 'testconfigs', 'ADRTest.json')).toString('utf8'));\r\n        ctx.stub.createCompositeKey.withArgs('adr', ['DEFAULT']).returns(' adr DEFAULT');\r\n        ctx.stub.getPrivateData.withArgs(testPDCName, ' adr DEFAULT').resolves(Buffer.from(JSON.stringify(new ADRRuleList({ Items: sampleADRs }))));\r\n\r\n        // Add all records for the find search\r\n        let adrIterator : Iterators.StateQueryIterator = {\r\n            close: async () => { return; },\r\n            next: async () => { \r\n                adrIterator['currentIndex']++;\r\n                return {\r\n                    value : {\r\n                        key: 'adr',\r\n                        value: Buffer.from(JSON.stringify(adrIterator['allItems'][adrIterator['currentIndex']])),\r\n                        getKey: ()=>'adr',\r\n                        getValue: ()=>Buffer.from(JSON.stringify(sampleADRs))\r\n                    } as Iterators.KV,\r\n                    done : (adrIterator['allItems'].length == adrIterator['currentIndex']+1)\r\n                } as Iterators.NextResult; \r\n            }\r\n        } as Iterators.StateQueryIterator;\r\n\r\n        adrIterator['allItems'] = sampleADRs;\r\n        adrIterator['currentIndex'] = -1;\r\n\r\n        ctx.stub.getPrivateDataByPartialCompositeKey.withArgs(testPDCName, 'adr', []).resolves(adrIterator);\r\n\r\n    });\r\n\r\n    describe('#retrieveADRRules', () => {\r\n        it('BR-ADR-001 should retrieve a list of ADR Rules', async () => {\r\n            await contract.retrieveADRRules(ctx).should.eventually.deep.equal(sampleADRs);\r\n        });\r\n    });\r\n\r\n    describe('#saveADRRule', () => {\r\n        it('BR-ADR-002 should merge new ADR Rules into existing rules', async () => {\r\n\r\n            let newADRRule: ADRRule = {\r\n                \"RuleID\" : \"BR-ADR-004\",\r\n                \"Description\" : \"BR-ADR-001 : PO data is missing\",\r\n                \"Solution\" : \"Don't Pay\",\r\n                \"Conditions\" : [\r\n                    {\r\n                        \"RuleConditionID\" : \"\", \r\n                        \"RuleID\" :  \"\",  \r\n                        \"Description\" :  \"\", \r\n                        \"FactType\" : \"PurchaseOrderQuantityMatched\",\r\n                        \"MinimumValue\" : 0,  \r\n                        \"MinimumComparisonType\" : \"==\",\r\n                        \"MaximumValue\" : 0,\r\n                        \"MaximumComparisonType\" : \"==\",\r\n                        \"LastUpdatedDate\" : 0\r\n                    }\r\n                ]  \r\n            } as ADRRule;\r\n\r\n            //Retrieving the existing ADRlist\r\n            sampleADRs = JSON.parse(fs.readFileSync(path.join(__dirname, 'testconfigs', 'ADRTest.json')).toString('utf8'));\r\n\r\n            //ADRlist combining the existing ADR Rule and the new Rule\r\n            sampleADRs.push(newADRRule);\r\n\r\n            let resultADRRule : ADRRule[] = await contract.saveADRRules(ctx, [newADRRule]);\r\n\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWithExactly(testPDCName, ' adr DEFAULT', Buffer.from(JSON.stringify(new ADRRuleList({ Items: sampleADRs }))));\r\n            \r\n            chai.expect(resultADRRule).to.deep.equal([newADRRule]);\r\n        });\r\n\r\n        it('BR-ADR-003 should replace matching ADR Rules with new rules', async () => {\r\n\r\n            let replacingADRRule: ADRRule =  {\r\n                \"RuleID\" : \"BR-ADR-001\",\r\n                \"Description\" : \"BR-ADR-001 : Replacing existing ADR rule\",\r\n                \"Solution\" : \"Pay\",\r\n                \"Conditions\" : [\r\n                    {\r\n                        \"RuleConditionID\" : \"\", \r\n                        \"RuleID\" :  \"\",  \r\n                        \"Description\" :  \"\", \r\n                        \"FactType\" : \"RDCReceivedQuantityMatched\",\r\n                        \"MinimumValue\" : 0,  \r\n                        \"MinimumComparisonType\" : \"==\",\r\n                        \"MaximumValue\" : 0,\r\n                        \"MaximumComparisonType\" : \"==\",\r\n                        \"LastUpdatedDate\" : 0\r\n                    }\r\n                ]  \r\n            } as ADRRule;\r\n\r\n            //Retrieving the existing ADRlist\r\n            sampleADRs = JSON.parse(fs.readFileSync(path.join(__dirname, 'testconfigs', 'ADRTest.json')).toString('utf8'));\r\n\r\n\r\n            //Replacing the existing ADR rule with the new matching ADR rule\r\n            const existingadrindex = sampleADRs.findIndex((v,i,l)=> { return v.RuleID = replacingADRRule.RuleID});\r\n            sampleADRs[existingadrindex] = replacingADRRule;\r\n\r\n            let resultADRRule : ADRRule[] = await contract.saveADRRules(ctx, [replacingADRRule]);\r\n\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWithExactly(testPDCName, ' adr DEFAULT', Buffer.from(JSON.stringify(new ADRRuleList({ Items: sampleADRs }))));\r\n            \r\n            chai.expect(resultADRRule).to.deep.equal([replacingADRRule]);\r\n\r\n        });\r\n    });\r\n\r\n    describe('#saveVendorShipped', () => {\r\n        let vsContract : VendorShippedContract = new VendorShippedContract();\r\n\r\n        it('BR-ADR-004 should not pay when PO data is missing', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-ADR-004', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await vsContract.saveVendorShipped(ctx, testConfig.input.PONumber, testConfig.input.VendorShippeds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n    });\r\n\r\n\r\n\r\n});"]}