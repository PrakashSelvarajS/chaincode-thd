"use strict";var cov_o86vhcdln=function(){var path="C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\repositories\\crud.repository.ts";var hash="916e36799c0e15f36ececcef6517d9ac702b9888";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\repositories\\crud.repository.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:15},end:{line:3,column:35}},"2":{start:{line:4,column:15},end:{line:4,column:68}},"3":{start:{line:7,column:8},end:{line:7,column:24}},"4":{start:{line:8,column:8},end:{line:8,column:38}},"5":{start:{line:9,column:8},end:{line:9,column:40}},"6":{start:{line:10,column:8},end:{line:10,column:41}},"7":{start:{line:13,column:0},end:{line:13,column:38}},"8":{start:{line:16,column:8},end:{line:16,column:65}},"9":{start:{line:17,column:8},end:{line:17,column:65}},"10":{start:{line:18,column:8},end:{line:18,column:67}},"11":{start:{line:19,column:8},end:{line:19,column:41}},"12":{start:{line:20,column:8},end:{line:20,column:38}},"13":{start:{line:21,column:8},end:{line:21,column:33}},"14":{start:{line:22,column:8},end:{line:22,column:28}},"15":{start:{line:23,column:8},end:{line:23,column:49}},"16":{start:{line:26,column:8},end:{line:26,column:85}},"17":{start:{line:29,column:8},end:{line:29,column:77}},"18":{start:{line:32,column:8},end:{line:47,column:9}},"19":{start:{line:33,column:34},end:{line:33,column:74}},"20":{start:{line:34,column:12},end:{line:41,column:13}},"21":{start:{line:35,column:16},end:{line:35,column:94}},"22":{start:{line:36,column:16},end:{line:36,column:29}},"23":{start:{line:39,column:16},end:{line:39,column:95}},"24":{start:{line:40,column:16},end:{line:40,column:28}},"25":{start:{line:44,column:12},end:{line:44,column:89}},"26":{start:{line:45,column:12},end:{line:45,column:97}},"27":{start:{line:46,column:12},end:{line:46,column:25}},"28":{start:{line:51,column:27},end:{line:51,column:68}},"29":{start:{line:53,column:23},end:{line:53,column:66}},"30":{start:{line:54,column:8},end:{line:56,column:9}},"31":{start:{line:55,column:12},end:{line:55,column:156}},"32":{start:{line:57,column:8},end:{line:57,column:72}},"33":{start:{line:61,column:27},end:{line:61,column:68}},"34":{start:{line:63,column:23},end:{line:63,column:66}},"35":{start:{line:64,column:8},end:{line:66,column:9}},"36":{start:{line:65,column:12},end:{line:65,column:149}},"37":{start:{line:67,column:8},end:{line:67,column:72}},"38":{start:{line:70,column:27},end:{line:70,column:76}},"39":{start:{line:71,column:8},end:{line:71,column:80}},"40":{start:{line:75,column:23},end:{line:75,column:73}},"41":{start:{line:76,column:8},end:{line:84,column:9}},"42":{start:{line:78,column:28},end:{line:78,column:65}},"43":{start:{line:80,column:12},end:{line:80,column:81}},"44":{start:{line:83,column:12},end:{line:83,column:66}},"45":{start:{line:86,column:8},end:{line:86,column:37}},"46":{start:{line:90,column:8},end:{line:90,column:77}},"47":{start:{line:91,column:27},end:{line:91,column:55}},"48":{start:{line:92,column:8},end:{line:92,column:73}},"49":{start:{line:94,column:8},end:{line:102,column:9}},"50":{start:{line:95,column:34},end:{line:95,column:74}},"51":{start:{line:96,column:12},end:{line:96,column:76}},"52":{start:{line:97,column:12},end:{line:97,column:33}},"53":{start:{line:100,column:12},end:{line:100,column:74}},"54":{start:{line:101,column:12},end:{line:101,column:80}},"55":{start:{line:106,column:8},end:{line:106,column:112}},"56":{start:{line:109,column:8},end:{line:109,column:101}},"57":{start:{line:110,column:8},end:{line:131,column:9}},"58":{start:{line:112,column:28},end:{line:112,column:65}},"59":{start:{line:113,column:12},end:{line:113,column:85}},"60":{start:{line:115,column:12},end:{line:121,column:13}},"61":{start:{line:116,column:16},end:{line:116,column:86}},"62":{start:{line:119,column:16},end:{line:119,column:111}},"63":{start:{line:120,column:16},end:{line:120,column:98}},"64":{start:{line:124,column:12},end:{line:130,column:13}},"65":{start:{line:125,column:16},end:{line:125,column:71}},"66":{start:{line:128,column:16},end:{line:128,column:118}},"67":{start:{line:129,column:16},end:{line:129,column:98}},"68":{start:{line:133,column:8},end:{line:149,column:9}},"69":{start:{line:134,column:12},end:{line:134,column:114}},"70":{start:{line:137,column:12},end:{line:143,column:13}},"71":{start:{line:138,column:16},end:{line:138,column:79}},"72":{start:{line:141,column:16},end:{line:141,column:123}},"73":{start:{line:142,column:16},end:{line:142,column:98}},"74":{start:{line:144,column:12},end:{line:144,column:97}},"75":{start:{line:145,column:12},end:{line:145,column:31}},"76":{start:{line:148,column:12},end:{line:148,column:19}},"77":{start:{line:152,column:27},end:{line:152,column:29}},"78":{start:{line:155,column:8},end:{line:166,column:9}},"79":{start:{line:157,column:28},end:{line:157,column:65}},"80":{start:{line:159,column:12},end:{line:159,column:124}},"81":{start:{line:160,column:12},end:{line:162,column:13}},"82":{start:{line:161,column:16},end:{line:161,column:48}},"83":{start:{line:165,column:12},end:{line:165,column:109}},"84":{start:{line:168,column:8},end:{line:184,column:9}},"85":{start:{line:169,column:31},end:{line:169,column:52}},"86":{start:{line:170,column:12},end:{line:177,column:13}},"87":{start:{line:172,column:16},end:{line:176,column:17}},"88":{start:{line:174,column:40},end:{line:174,column:110}},"89":{start:{line:175,column:20},end:{line:175,column:51}},"90":{start:{line:179,column:12},end:{line:183,column:13}},"91":{start:{line:181,column:16},end:{line:181,column:39}},"92":{start:{line:182,column:16},end:{line:182,column:22}},"93":{start:{line:185,column:8},end:{line:185,column:28}},"94":{start:{line:189,column:27},end:{line:189,column:55}},"95":{start:{line:191,column:23},end:{line:191,column:66}},"96":{start:{line:192,column:8},end:{line:208,column:9}},"97":{start:{line:194,column:12},end:{line:194,column:25}},"98":{start:{line:197,column:12},end:{line:205,column:13}},"99":{start:{line:199,column:32},end:{line:199,column:69}},"100":{start:{line:201,column:16},end:{line:201,column:80}},"101":{start:{line:204,column:16},end:{line:204,column:65}},"102":{start:{line:207,column:12},end:{line:207,column:24}},"103":{start:{line:211,column:8},end:{line:211,column:70}},"104":{start:{line:214,column:0},end:{line:214,column:40}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:4},end:{line:6,column:5}},loc:{start:{line:6,column:22},end:{line:11,column:5}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:15,column:4},end:{line:15,column:5}},loc:{start:{line:15,column:57},end:{line:24,column:5}},line:15},"2":{name:"(anonymous_2)",decl:{start:{line:25,column:4},end:{line:25,column:5}},loc:{start:{line:25,column:51},end:{line:27,column:5}},line:25},"3":{name:"(anonymous_3)",decl:{start:{line:28,column:4},end:{line:28,column:5}},loc:{start:{line:28,column:50},end:{line:30,column:5}},line:28},"4":{name:"(anonymous_4)",decl:{start:{line:31,column:4},end:{line:31,column:5}},loc:{start:{line:31,column:43},end:{line:48,column:5}},line:31},"5":{name:"(anonymous_5)",decl:{start:{line:49,column:4},end:{line:49,column:5}},loc:{start:{line:49,column:32},end:{line:58,column:5}},line:49},"6":{name:"(anonymous_6)",decl:{start:{line:59,column:4},end:{line:59,column:5}},loc:{start:{line:59,column:32},end:{line:68,column:5}},line:59},"7":{name:"(anonymous_7)",decl:{start:{line:69,column:4},end:{line:69,column:5}},loc:{start:{line:69,column:38},end:{line:72,column:5}},line:69},"8":{name:"(anonymous_8)",decl:{start:{line:73,column:4},end:{line:73,column:5}},loc:{start:{line:73,column:64},end:{line:87,column:5}},line:73},"9":{name:"(anonymous_9)",decl:{start:{line:88,column:4},end:{line:88,column:5}},loc:{start:{line:88,column:47},end:{line:103,column:5}},line:88},"10":{name:"(anonymous_10)",decl:{start:{line:104,column:4},end:{line:104,column:5}},loc:{start:{line:104,column:40},end:{line:150,column:5}},line:104},"11":{name:"(anonymous_11)",decl:{start:{line:151,column:4},end:{line:151,column:5}},loc:{start:{line:151,column:31},end:{line:186,column:5}},line:151},"12":{name:"(anonymous_12)",decl:{start:{line:187,column:4},end:{line:187,column:5}},loc:{start:{line:187,column:27},end:{line:209,column:5}},line:187},"13":{name:"(anonymous_13)",decl:{start:{line:210,column:4},end:{line:210,column:5}},loc:{start:{line:210,column:32},end:{line:212,column:5}},line:210}},branchMap:{"0":{loc:{start:{line:15,column:31},end:{line:15,column:55}},type:"default-arg",locations:[{start:{line:15,column:50},end:{line:15,column:55}}],line:15},"1":{loc:{start:{line:25,column:18},end:{line:25,column:49}},type:"default-arg",locations:[{start:{line:25,column:29},end:{line:25,column:49}}],line:25},"2":{loc:{start:{line:28,column:17},end:{line:28,column:48}},type:"default-arg",locations:[{start:{line:28,column:28},end:{line:28,column:48}}],line:28},"3":{loc:{start:{line:34,column:12},end:{line:41,column:13}},type:"if",locations:[{start:{line:34,column:12},end:{line:41,column:13}},{start:{line:34,column:12},end:{line:41,column:13}}],line:34},"4":{loc:{start:{line:54,column:8},end:{line:56,column:9}},type:"if",locations:[{start:{line:54,column:8},end:{line:56,column:9}},{start:{line:54,column:8},end:{line:56,column:9}}],line:54},"5":{loc:{start:{line:64,column:8},end:{line:66,column:9}},type:"if",locations:[{start:{line:64,column:8},end:{line:66,column:9}},{start:{line:64,column:8},end:{line:66,column:9}}],line:64},"6":{loc:{start:{line:76,column:8},end:{line:84,column:9}},type:"if",locations:[{start:{line:76,column:8},end:{line:84,column:9}},{start:{line:76,column:8},end:{line:84,column:9}}],line:76},"7":{loc:{start:{line:88,column:14},end:{line:88,column:45}},type:"default-arg",locations:[{start:{line:88,column:25},end:{line:88,column:45}}],line:88},"8":{loc:{start:{line:110,column:8},end:{line:131,column:9}},type:"if",locations:[{start:{line:110,column:8},end:{line:131,column:9}},{start:{line:110,column:8},end:{line:131,column:9}}],line:110},"9":{loc:{start:{line:133,column:8},end:{line:149,column:9}},type:"if",locations:[{start:{line:133,column:8},end:{line:149,column:9}},{start:{line:133,column:8},end:{line:149,column:9}}],line:133},"10":{loc:{start:{line:133,column:12},end:{line:133,column:41}},type:"binary-expr",locations:[{start:{line:133,column:12},end:{line:133,column:20}},{start:{line:133,column:24},end:{line:133,column:41}}],line:133},"11":{loc:{start:{line:151,column:15},end:{line:151,column:29}},type:"default-arg",locations:[{start:{line:151,column:27},end:{line:151,column:29}}],line:151},"12":{loc:{start:{line:155,column:8},end:{line:166,column:9}},type:"if",locations:[{start:{line:155,column:8},end:{line:166,column:9}},{start:{line:155,column:8},end:{line:166,column:9}}],line:155},"13":{loc:{start:{line:160,column:12},end:{line:162,column:13}},type:"if",locations:[{start:{line:160,column:12},end:{line:162,column:13}},{start:{line:160,column:12},end:{line:162,column:13}}],line:160},"14":{loc:{start:{line:170,column:12},end:{line:177,column:13}},type:"if",locations:[{start:{line:170,column:12},end:{line:177,column:13}},{start:{line:170,column:12},end:{line:177,column:13}}],line:170},"15":{loc:{start:{line:172,column:16},end:{line:176,column:17}},type:"if",locations:[{start:{line:172,column:16},end:{line:176,column:17}},{start:{line:172,column:16},end:{line:176,column:17}}],line:172},"16":{loc:{start:{line:179,column:12},end:{line:183,column:13}},type:"if",locations:[{start:{line:179,column:12},end:{line:183,column:13}},{start:{line:179,column:12},end:{line:183,column:13}}],line:179},"17":{loc:{start:{line:192,column:8},end:{line:208,column:9}},type:"if",locations:[{start:{line:192,column:8},end:{line:208,column:9}},{start:{line:192,column:8},end:{line:208,column:9}}],line:192},"18":{loc:{start:{line:197,column:12},end:{line:205,column:13}},type:"if",locations:[{start:{line:197,column:12},end:{line:205,column:13}},{start:{line:197,column:12},end:{line:205,column:13}}],line:197}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},b:{"0":[0],"1":[0],"2":[0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"916e36799c0e15f36ececcef6517d9ac702b9888"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();cov_o86vhcdln.s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const Logger=(cov_o86vhcdln.s[1]++,require('../logger'));const logger=(cov_o86vhcdln.s[2]++,Logger.getLogger('./repositories/crud.repository.ts'));class DocumentIndex{constructor(init){cov_o86vhcdln.f[0]++;cov_o86vhcdln.s[3]++;this.Items=[];cov_o86vhcdln.s[4]++;this.DelayIndexUpdate=false;cov_o86vhcdln.s[5]++;this.NeedsToBePersisted=false;cov_o86vhcdln.s[6]++;global.Object.assign(this,init);}}cov_o86vhcdln.s[7]++;exports.DocumentIndex=DocumentIndex;class CRUDRepository{constructor(tcreator,ctx,delayIndexUpdate=(cov_o86vhcdln.b[0][0]++,false)){cov_o86vhcdln.f[1]++;cov_o86vhcdln.s[8]++;this.objectType=Object.getPrototypeOf(this).objectType;cov_o86vhcdln.s[9]++;this.requirePDC=Object.getPrototypeOf(this).requirePDC;cov_o86vhcdln.s[10]++;this.pdcResolver=Object.getPrototypeOf(this).pdcResolver;cov_o86vhcdln.s[11]++;this.defaultRecordID='DEFAULT';cov_o86vhcdln.s[12]++;this.DelayIndexUpdate=false;cov_o86vhcdln.s[13]++;this.TCreator=tcreator;cov_o86vhcdln.s[14]++;this.TContext=ctx;cov_o86vhcdln.s[15]++;this.DelayIndexUpdate=delayIndexUpdate;}getStorageKey(recordID=(cov_o86vhcdln.b[1][0]++,this.defaultRecordID)){cov_o86vhcdln.f[2]++;cov_o86vhcdln.s[16]++;return this.TContext.stub.createCompositeKey(this['objectType'],[recordID]);}async exists(recordID=(cov_o86vhcdln.b[2][0]++,this.defaultRecordID)){cov_o86vhcdln.f[3]++;cov_o86vhcdln.s[17]++;return await this.existsWithStorageKey(this.getStorageKey(recordID));}async existsWithStorageKey(storageKey){cov_o86vhcdln.f[4]++;cov_o86vhcdln.s[18]++;try{const currentRecord=(cov_o86vhcdln.s[19]++,await this.getWithStorageKey(storageKey));cov_o86vhcdln.s[20]++;if(currentRecord===undefined){cov_o86vhcdln.b[3][0]++;cov_o86vhcdln.s[21]++;logger.debug(`---CRUD-REPO : existsWithStorageKey => failed locating record`);cov_o86vhcdln.s[22]++;return false;}else{cov_o86vhcdln.b[3][1]++;cov_o86vhcdln.s[23]++;logger.debug(`---CRUD-REPO : existsWithStorageKey => success locating record`);cov_o86vhcdln.s[24]++;return true;}}catch(err){cov_o86vhcdln.s[25]++;logger.debug(`---CRUD-REPO : existsWithStorageKey => error locating record`);cov_o86vhcdln.s[26]++;logger.debug(`---CRUD-REPO : existsWithStorageKey => ERROR: ${JSON.stringify(err)}`);cov_o86vhcdln.s[27]++;return false;}}async create(modelToCreate){cov_o86vhcdln.f[5]++;// Get the storage key for the Model
const storageKey=(cov_o86vhcdln.s[28]++,this.getStorageKeyForModel(modelToCreate));// Make sure the Model does not exist in the blockchain
const exists=(cov_o86vhcdln.s[29]++,await this.existsWithStorageKey(storageKey));cov_o86vhcdln.s[30]++;if(exists){cov_o86vhcdln.b[4][0]++;cov_o86vhcdln.s[31]++;throw new Error(`ERROR: create function in CRUDBaseContract failed.  A record already exists in the blockchain with storage key ${storageKey}`);}else{cov_o86vhcdln.b[4][1]++;}cov_o86vhcdln.s[32]++;return await this.saveWithStorageKey(modelToCreate,storageKey);}async update(modelToUpdate){cov_o86vhcdln.f[6]++;// Get the storage key for the Model
const storageKey=(cov_o86vhcdln.s[33]++,this.getStorageKeyForModel(modelToUpdate));// Make sure the Model exists in the blockchain
const exists=(cov_o86vhcdln.s[34]++,await this.existsWithStorageKey(storageKey));cov_o86vhcdln.s[35]++;if(!exists){cov_o86vhcdln.b[5][0]++;cov_o86vhcdln.s[36]++;throw new Error(`ERROR: update function in CRUDBaseContract failed.  No records exist in the blockchain with storage key ${storageKey}`);}else{cov_o86vhcdln.b[5][1]++;}cov_o86vhcdln.s[37]++;return await this.saveWithStorageKey(modelToUpdate,storageKey);}async save(modelToCreateOrUpdate){cov_o86vhcdln.f[7]++;const storageKey=(cov_o86vhcdln.s[38]++,this.getStorageKeyForModel(modelToCreateOrUpdate));cov_o86vhcdln.s[39]++;return await this.saveWithStorageKey(modelToCreateOrUpdate,storageKey);}async saveWithStorageKey(modelToCreateOrUpdate,storageKey){cov_o86vhcdln.f[8]++;// Serialize and store the provided Model
const buffer=(cov_o86vhcdln.s[40]++,Buffer.from(JSON.stringify(modelToCreateOrUpdate)));cov_o86vhcdln.s[41]++;if(this.requirePDC){cov_o86vhcdln.b[6][0]++;// Get the PDC name
const pdcName=(cov_o86vhcdln.s[42]++,await this.pdcResolver(this.TContext));// Store the data in the PDC with the matching storageKey
cov_o86vhcdln.s[43]++;await this.TContext.stub.putPrivateData(pdcName,storageKey,buffer);}else{cov_o86vhcdln.b[6][1]++;cov_o86vhcdln.s[44]++;await this.TContext.stub.putState(storageKey,buffer);}// Return the stored Model
cov_o86vhcdln.s[45]++;return modelToCreateOrUpdate;}async get(recordID=(cov_o86vhcdln.b[7][0]++,this.defaultRecordID)){cov_o86vhcdln.f[9]++;cov_o86vhcdln.s[46]++;// Create the storage key
logger.debug(`---CRUD-REPO : get => retrieving record: ${recordID}`);const storageKey=(cov_o86vhcdln.s[47]++,this.getStorageKey(recordID));cov_o86vhcdln.s[48]++;logger.debug(`---CRUD-REPO : get => storage key: ${storageKey}`);// Retrieve the Model from storage using the storage key
cov_o86vhcdln.s[49]++;try{const currentRecord=(cov_o86vhcdln.s[50]++,await this.getWithStorageKey(storageKey));cov_o86vhcdln.s[51]++;logger.debug(`---CRUD-REPO : get => success retrieving record`);cov_o86vhcdln.s[52]++;return currentRecord;}catch(err){cov_o86vhcdln.s[53]++;logger.debug(`---CRUD-REPO : get => error retrieving record`);cov_o86vhcdln.s[54]++;logger.debug(`---CRUD-REPO : get => ERROR: ${JSON.stringify(err)}`);}}async getWithStorageKey(storageKey){cov_o86vhcdln.f[10]++;cov_o86vhcdln.s[55]++;// Get a list of all record IDs in the index        
logger.debug(`---CRUD-REPO : getWithStorageKey => retrieving a record with storage key: ${storageKey}`);// Attempt to retrieve the Model from the blockchain 
let buffer;cov_o86vhcdln.s[56]++;logger.debug(`---CRUD-REPO : getWithStorageKey => record stored in PDC: ${this.requirePDC}`);cov_o86vhcdln.s[57]++;if(this.requirePDC){cov_o86vhcdln.b[8][0]++;// Get the PDC name
const pdcName=(cov_o86vhcdln.s[58]++,await this.pdcResolver(this.TContext));cov_o86vhcdln.s[59]++;logger.debug(`---CRUD-REPO : getWithStorageKey => PDC Name: ${pdcName}`);// Get the data in the PDC with the matching storageKey
cov_o86vhcdln.s[60]++;try{cov_o86vhcdln.s[61]++;buffer=await this.TContext.stub.getPrivateData(pdcName,storageKey);}catch(err){cov_o86vhcdln.s[62]++;logger.debug(`---CRUD-REPO : getWithStorageKey => Failed to retrieve the record from the PDC`);cov_o86vhcdln.s[63]++;logger.debug(`---CRUD-REPO : getWithStorageKey => ERROR: ${JSON.stringify(err)}`);}}else{cov_o86vhcdln.b[8][1]++;cov_o86vhcdln.s[64]++;try{cov_o86vhcdln.s[65]++;buffer=await this.TContext.stub.getState(storageKey);}catch(err){cov_o86vhcdln.s[66]++;logger.debug(`---CRUD-REPO : getWithStorageKey => Failed to retrieve the record from the WorldState`);cov_o86vhcdln.s[67]++;logger.debug(`---CRUD-REPO : getWithStorageKey => ERROR: ${JSON.stringify(err)}`);}}// If we did find something, then convert the value from the blockchain into a Model, otherwise return undefined
cov_o86vhcdln.s[68]++;if((cov_o86vhcdln.b[10][0]++,!!buffer)&&(cov_o86vhcdln.b[10][1]++,buffer.length>0)){cov_o86vhcdln.b[9][0]++;cov_o86vhcdln.s[69]++;logger.debug(`---CRUD-REPO : getWithStorageKey => Retrieved the record buffer: ${buffer.toString()}`);// Convert the buffer retrieved from the blockchain into the Model
let returnModel;cov_o86vhcdln.s[70]++;try{cov_o86vhcdln.s[71]++;returnModel=new this.TCreator(JSON.parse(buffer.toString()));}catch(err){cov_o86vhcdln.s[72]++;logger.debug(`---CRUD-REPO : getWithStorageKey => Failed to convert the record from the retrieved buffer`);cov_o86vhcdln.s[73]++;logger.debug(`---CRUD-REPO : getWithStorageKey => ERROR: ${JSON.stringify(err)}`);}cov_o86vhcdln.s[74]++;logger.debug(`---CRUD-REPO : getWithStorageKey => Retrieved the Model successfully`);cov_o86vhcdln.s[75]++;return returnModel;}else{cov_o86vhcdln.b[9][1]++;cov_o86vhcdln.s[76]++;return;}}async find(recordIDs=(cov_o86vhcdln.b[11][0]++,[])){cov_o86vhcdln.f[11]++;let returnResult=(cov_o86vhcdln.s[77]++,[]);// Attempt to retrieve the Model list from the blockchain 
let iterator;cov_o86vhcdln.s[78]++;if(this.requirePDC){cov_o86vhcdln.b[12][0]++;// Get the PDC name
const pdcName=(cov_o86vhcdln.s[79]++,await this.pdcResolver(this.TContext));// Search for the data in the PDC with a matching partial storage key    
cov_o86vhcdln.s[80]++;iterator=await this.TContext.stub.getPrivateDataByPartialCompositeKey(pdcName,this['objectType'],recordIDs);cov_o86vhcdln.s[81]++;if(iterator['iterator']!==undefined){cov_o86vhcdln.b[13][0]++;cov_o86vhcdln.s[82]++;iterator=iterator['iterator'];}else{cov_o86vhcdln.b[13][1]++;}}else{cov_o86vhcdln.b[12][1]++;cov_o86vhcdln.s[83]++;iterator=await this.TContext.stub.getStateByPartialCompositeKey(this['objectType'],recordIDs);}// Collect all the results from the iterator
cov_o86vhcdln.s[84]++;while(true){const nextResult=(cov_o86vhcdln.s[85]++,await iterator.next());cov_o86vhcdln.s[86]++;if(nextResult.value){cov_o86vhcdln.b[14][0]++;cov_o86vhcdln.s[87]++;// If we did find something, then convert the value from the blockchain into a Model, otherwise return undefined
if(nextResult.value.value.length>0){cov_o86vhcdln.b[15][0]++;// Convert the buffer retrieved from the blockchain into the Model
const returnModel=(cov_o86vhcdln.s[88]++,new this.TCreator(JSON.parse(nextResult.value.value.toString('utf8'))));cov_o86vhcdln.s[89]++;returnResult.push(returnModel);}else{cov_o86vhcdln.b[15][1]++;}}else{cov_o86vhcdln.b[14][1]++;}// check to see if we have reached then end
cov_o86vhcdln.s[90]++;if(nextResult.done){cov_o86vhcdln.b[16][0]++;cov_o86vhcdln.s[91]++;// explicitly close the iterator            
await iterator.close();cov_o86vhcdln.s[92]++;break;}else{cov_o86vhcdln.b[16][1]++;}}cov_o86vhcdln.s[93]++;return returnResult;}async delete(recordID){cov_o86vhcdln.f[12]++;// Get the storage key for the Model
const storageKey=(cov_o86vhcdln.s[94]++,this.getStorageKey(recordID));// Make sure the Model exists in the blockchain
const exists=(cov_o86vhcdln.s[95]++,await this.existsWithStorageKey(storageKey));cov_o86vhcdln.s[96]++;if(!exists){cov_o86vhcdln.b[17][0]++;cov_o86vhcdln.s[97]++;// The function succeeded, but we did not delete anything, so return false
return false;}else{cov_o86vhcdln.b[17][1]++;cov_o86vhcdln.s[98]++;if(this.requirePDC){cov_o86vhcdln.b[18][0]++;// Get the PDC name
const pdcName=(cov_o86vhcdln.s[99]++,await this.pdcResolver(this.TContext));// Delete the data in the PDC with the matching storageKey
cov_o86vhcdln.s[100]++;await this.TContext.stub.deletePrivateData(pdcName,storageKey);}else{cov_o86vhcdln.b[18][1]++;cov_o86vhcdln.s[101]++;await this.TContext.stub.deleteState(storageKey);}// The function succeeded, and we deleted something, so return true
cov_o86vhcdln.s[102]++;return true;}}async deleteMany(searchKey){cov_o86vhcdln.f[13]++;cov_o86vhcdln.s[103]++;throw new Error('ERROR: deleteMany has not been implemented');}}cov_o86vhcdln.s[104]++;exports.CRUDRepository=CRUDRepository;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxQUkFLQVNIU0VMVkFSQUpcXEJsb2NrY2hhaW5cXEhvbWUgRGVwb3RcXERldmVsb3BtZW50XFxjaGFpbmNvZGVfMDkwMVxcc3JjXFxyZXBvc2l0b3JpZXNcXGNydWQucmVwb3NpdG9yeS50cyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxQUkFLQVNIU0VMVkFSQUpcXEJsb2NrY2hhaW5cXEhvbWUgRGVwb3RcXERldmVsb3BtZW50XFxjaGFpbmNvZGVfMDkwMVxcc3JjXFxyZXBvc2l0b3JpZXNcXGNydWQucmVwb3NpdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUtBLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNwQyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7QUFHckUsTUFBYSxhQUFhO0lBSXRCLFlBQVksSUFBNEI7UUFIakMsVUFBSyxHQUFjLEVBQUUsQ0FBQztRQUN0QixxQkFBZ0IsR0FBYSxLQUFLLENBQUM7UUFDbkMsdUJBQWtCLEdBQWEsS0FBSyxDQUFDO1FBRXhDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDO0NBQ0o7QUFQRCxzQ0FPQztBQUlELE1BQXNCLGNBQWM7SUFhaEMsWUFBWSxRQUF5QyxFQUFFLEdBQWEsRUFBRSxtQkFBNkIsS0FBSztRQVg5RixlQUFVLEdBQVcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUM7UUFDNUQsZUFBVSxHQUFZLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDO1FBQzdELGdCQUFXLEdBQW9DLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDO1FBQ3ZGLG9CQUFlLEdBQVcsU0FBUyxDQUFDO1FBTXRDLHFCQUFnQixHQUFhLEtBQUss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QUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzNELElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDVCwwRUFBMEU7WUFDMUUsT0FBTyxLQUFLLENBQUM7U0FDaEI7YUFBTTtZQUNILElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDakIsbUJBQW1CO2dCQUNuQixNQUFNLE9BQU8sR0FBWSxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUUvRCwwREFBMEQ7Z0JBQzFELE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO2FBQ25FO2lCQUFNO2dCQUNILE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ3BEO1lBRUQsbUVBQW1FO1lBQ25FLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7SUFDTCxDQUFDO0lBRU0sS0FBSyxDQUFDLFVBQVUsQ0FBQyxTQUFpQjtRQUNyQyxNQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7SUFDbEUsQ0FBQztDQUdKO0FBek9ELHdDQXlPQyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxuaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gXCJmYWJyaWMtY29udHJhY3QtYXBpXCI7XHJcbmltcG9ydCB7IEl0ZXJhdG9ycyB9IGZyb20gXCJmYWJyaWMtc2hpbVwiO1xyXG5cclxuY29uc3QgTG9nZ2VyID0gcmVxdWlyZSgnLi4vbG9nZ2VyJyk7XHJcbmNvbnN0IGxvZ2dlciA9IExvZ2dlci5nZXRMb2dnZXIoJy4vcmVwb3NpdG9yaWVzL2NydWQucmVwb3NpdG9yeS50cycpO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBEb2N1bWVudEluZGV4IHtcclxuICAgIHB1YmxpYyBJdGVtcyA6IHN0cmluZ1tdID0gW107XHJcbiAgICBwdWJsaWMgRGVsYXlJbmRleFVwZGF0ZSA6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHB1YmxpYyBOZWVkc1RvQmVQZXJzaXN0ZWQgOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBjb25zdHJ1Y3Rvcihpbml0PzpQYXJ0aWFsPERvY3VtZW50SW5kZXg+KSB7XHJcbiAgICAgICAgZ2xvYmFsLk9iamVjdC5hc3NpZ24odGhpcywgaW5pdCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENSVURSZXBvc2l0b3J5PFQ+IHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgb2JqZWN0VHlwZTogc3RyaW5nID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLm9iamVjdFR5cGU7XHJcbiAgICBwcm90ZWN0ZWQgcmVxdWlyZVBEQzogYm9vbGVhbiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5yZXF1aXJlUERDO1xyXG4gICAgcHJvdGVjdGVkIHBkY1Jlc29sdmVyPzogKGN0eDpDb250ZXh0KT0+UHJvbWlzZTxzdHJpbmc+ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLnBkY1Jlc29sdmVyO1xyXG4gICAgcHJvdGVjdGVkIGRlZmF1bHRSZWNvcmRJRDogc3RyaW5nID0gJ0RFRkFVTFQnO1xyXG4gICAgXHJcbiAgICBwcml2YXRlIFRDcmVhdG9yIDogeyBuZXcgKGluaXQ/OlBhcnRpYWw8VD4pIDogVCB9O1xyXG4gICAgcHJvdGVjdGVkIFRDb250ZXh0IDogQ29udGV4dDtcclxuXHJcbiAgICBwcml2YXRlIEluZGV4IDogRG9jdW1lbnRJbmRleCB8IHVuZGVmaW5lZDtcclxuICAgIHByaXZhdGUgRGVsYXlJbmRleFVwZGF0ZSA6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih0Y3JlYXRvciA6IHsgbmV3IChpbml0PzpQYXJ0aWFsPFQ+KSA6IFQgfSwgY3R4IDogQ29udGV4dCwgZGVsYXlJbmRleFVwZGF0ZSA6IGJvb2xlYW4gPSBmYWxzZSkgeyBcclxuICAgICAgICB0aGlzLlRDcmVhdG9yID0gdGNyZWF0b3I7XHJcbiAgICAgICAgdGhpcy5UQ29udGV4dCA9IGN0eDtcclxuICAgICAgICB0aGlzLkRlbGF5SW5kZXhVcGRhdGUgPSBkZWxheUluZGV4VXBkYXRlO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRTdG9yYWdlS2V5Rm9yTW9kZWwoY3VycmVudE1vZGVsIDogVCkgOiBzdHJpbmc7XHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgIHB1YmxpYyBnZXRTdG9yYWdlS2V5KHJlY29yZElEIDogc3RyaW5nID0gdGhpcy5kZWZhdWx0UmVjb3JkSUQpIDogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5UQ29udGV4dC5zdHViLmNyZWF0ZUNvbXBvc2l0ZUtleSh0aGlzWydvYmplY3RUeXBlJ10sIFtyZWNvcmRJRF0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBleGlzdHMocmVjb3JkSUQ6IHN0cmluZyA9IHRoaXMuZGVmYXVsdFJlY29yZElEKSA6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmV4aXN0c1dpdGhTdG9yYWdlS2V5KHRoaXMuZ2V0U3RvcmFnZUtleShyZWNvcmRJRCkpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGFzeW5jIGV4aXN0c1dpdGhTdG9yYWdlS2V5KHN0b3JhZ2VLZXkgOiBzdHJpbmcpIDogUHJvbWlzZTxib29sZWFuPiB7ICAgICAgICBcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50UmVjb3JkIDogVCA9IGF3YWl0IHRoaXMuZ2V0V2l0aFN0b3JhZ2VLZXkoc3RvcmFnZUtleSk7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50UmVjb3JkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgLS0tQ1JVRC1SRVBPIDogZXhpc3RzV2l0aFN0b3JhZ2VLZXkgPT4gZmFpbGVkIGxvY2F0aW5nIHJlY29yZGApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGAtLS1DUlVELVJFUE8gOiBleGlzdHNXaXRoU3RvcmFnZUtleSA9PiBzdWNjZXNzIGxvY2F0aW5nIHJlY29yZGApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnIpIHsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgLS0tQ1JVRC1SRVBPIDogZXhpc3RzV2l0aFN0b3JhZ2VLZXkgPT4gZXJyb3IgbG9jYXRpbmcgcmVjb3JkYCk7ICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgLS0tQ1JVRC1SRVBPIDogZXhpc3RzV2l0aFN0b3JhZ2VLZXkgPT4gRVJST1I6ICR7SlNPTi5zdHJpbmdpZnkoZXJyKX1gKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgY3JlYXRlKG1vZGVsVG9DcmVhdGU6IFQpIDogUHJvbWlzZTxUPiB7XHJcbiAgICAgICAgLy8gR2V0IHRoZSBzdG9yYWdlIGtleSBmb3IgdGhlIE1vZGVsXHJcbiAgICAgICAgY29uc3Qgc3RvcmFnZUtleSA6IHN0cmluZyA9IHRoaXMuZ2V0U3RvcmFnZUtleUZvck1vZGVsKG1vZGVsVG9DcmVhdGUpO1xyXG5cclxuICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIE1vZGVsIGRvZXMgbm90IGV4aXN0IGluIHRoZSBibG9ja2NoYWluXHJcbiAgICAgICAgY29uc3QgZXhpc3RzID0gYXdhaXQgdGhpcy5leGlzdHNXaXRoU3RvcmFnZUtleShzdG9yYWdlS2V5KTtcclxuICAgICAgICBpZiAoZXhpc3RzKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRVJST1I6IGNyZWF0ZSBmdW5jdGlvbiBpbiBDUlVEQmFzZUNvbnRyYWN0IGZhaWxlZC4gIEEgcmVjb3JkIGFscmVhZHkgZXhpc3RzIGluIHRoZSBibG9ja2NoYWluIHdpdGggc3RvcmFnZSBrZXkgJHtzdG9yYWdlS2V5fWApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc2F2ZVdpdGhTdG9yYWdlS2V5KG1vZGVsVG9DcmVhdGUsIHN0b3JhZ2VLZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyB1cGRhdGUobW9kZWxUb1VwZGF0ZTogVCkgOiBQcm9taXNlPFQ+IHtcclxuICAgICAgICAvLyBHZXQgdGhlIHN0b3JhZ2Uga2V5IGZvciB0aGUgTW9kZWxcclxuICAgICAgICBjb25zdCBzdG9yYWdlS2V5IDogc3RyaW5nID0gdGhpcy5nZXRTdG9yYWdlS2V5Rm9yTW9kZWwobW9kZWxUb1VwZGF0ZSk7XHJcblxyXG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgTW9kZWwgZXhpc3RzIGluIHRoZSBibG9ja2NoYWluXHJcbiAgICAgICAgY29uc3QgZXhpc3RzID0gYXdhaXQgdGhpcy5leGlzdHNXaXRoU3RvcmFnZUtleShzdG9yYWdlS2V5KTtcclxuICAgICAgICBpZiAoIWV4aXN0cykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVSUk9SOiB1cGRhdGUgZnVuY3Rpb24gaW4gQ1JVREJhc2VDb250cmFjdCBmYWlsZWQuICBObyByZWNvcmRzIGV4aXN0IGluIHRoZSBibG9ja2NoYWluIHdpdGggc3RvcmFnZSBrZXkgJHtzdG9yYWdlS2V5fWApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc2F2ZVdpdGhTdG9yYWdlS2V5KG1vZGVsVG9VcGRhdGUsIHN0b3JhZ2VLZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBzYXZlKG1vZGVsVG9DcmVhdGVPclVwZGF0ZTogVCkgOiBQcm9taXNlPFQ+IHtcclxuICAgICAgICBjb25zdCBzdG9yYWdlS2V5IDogc3RyaW5nID0gdGhpcy5nZXRTdG9yYWdlS2V5Rm9yTW9kZWwobW9kZWxUb0NyZWF0ZU9yVXBkYXRlKTtcclxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zYXZlV2l0aFN0b3JhZ2VLZXkobW9kZWxUb0NyZWF0ZU9yVXBkYXRlLCBzdG9yYWdlS2V5KTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBhc3luYyBzYXZlV2l0aFN0b3JhZ2VLZXkobW9kZWxUb0NyZWF0ZU9yVXBkYXRlOiBULCBzdG9yYWdlS2V5IDogc3RyaW5nKSA6IFByb21pc2U8VD4ge1xyXG4gICAgICAgIC8vIFNlcmlhbGl6ZSBhbmQgc3RvcmUgdGhlIHByb3ZpZGVkIE1vZGVsXHJcbiAgICAgICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmZyb20oSlNPTi5zdHJpbmdpZnkobW9kZWxUb0NyZWF0ZU9yVXBkYXRlKSk7XHJcbiAgICAgICAgaWYgKHRoaXMucmVxdWlyZVBEQykge1xyXG4gICAgICAgICAgICAvLyBHZXQgdGhlIFBEQyBuYW1lXHJcbiAgICAgICAgICAgIGNvbnN0IHBkY05hbWUgOiBzdHJpbmcgPSBhd2FpdCB0aGlzLnBkY1Jlc29sdmVyKHRoaXMuVENvbnRleHQpO1xyXG5cclxuICAgICAgICAgICAgLy8gU3RvcmUgdGhlIGRhdGEgaW4gdGhlIFBEQyB3aXRoIHRoZSBtYXRjaGluZyBzdG9yYWdlS2V5XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuVENvbnRleHQuc3R1Yi5wdXRQcml2YXRlRGF0YShwZGNOYW1lLCBzdG9yYWdlS2V5LCBidWZmZXIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuVENvbnRleHQuc3R1Yi5wdXRTdGF0ZShzdG9yYWdlS2V5LCBidWZmZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIHRoZSBzdG9yZWQgTW9kZWxcclxuICAgICAgICByZXR1cm4gbW9kZWxUb0NyZWF0ZU9yVXBkYXRlO1xyXG4gICAgfVxyXG5cclxuICAgIFxyXG4gICAgcHVibGljIGFzeW5jIGdldChyZWNvcmRJRDogc3RyaW5nID0gdGhpcy5kZWZhdWx0UmVjb3JkSUQpIDogUHJvbWlzZTxUIHwgdW5kZWZpbmVkPiB7XHJcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBzdG9yYWdlIGtleVxyXG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgLS0tQ1JVRC1SRVBPIDogZ2V0ID0+IHJldHJpZXZpbmcgcmVjb3JkOiAke3JlY29yZElEfWApO1xyXG4gICAgICAgIGNvbnN0IHN0b3JhZ2VLZXkgOiBzdHJpbmcgPSB0aGlzLmdldFN0b3JhZ2VLZXkocmVjb3JkSUQpOyBcclxuICAgICAgICBsb2dnZXIuZGVidWcoYC0tLUNSVUQtUkVQTyA6IGdldCA9PiBzdG9yYWdlIGtleTogJHtzdG9yYWdlS2V5fWApO1xyXG5cclxuICAgICAgICAvLyBSZXRyaWV2ZSB0aGUgTW9kZWwgZnJvbSBzdG9yYWdlIHVzaW5nIHRoZSBzdG9yYWdlIGtleVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRSZWNvcmQgOiBUID0gYXdhaXQgdGhpcy5nZXRXaXRoU3RvcmFnZUtleShzdG9yYWdlS2V5KTtcclxuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGAtLS1DUlVELVJFUE8gOiBnZXQgPT4gc3VjY2VzcyByZXRyaWV2aW5nIHJlY29yZGApO1xyXG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFJlY29yZDtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgLS0tQ1JVRC1SRVBPIDogZ2V0ID0+IGVycm9yIHJldHJpZXZpbmcgcmVjb3JkYCk7ICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgLS0tQ1JVRC1SRVBPIDogZ2V0ID0+IEVSUk9SOiAke0pTT04uc3RyaW5naWZ5KGVycil9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIGFzeW5jIGdldFdpdGhTdG9yYWdlS2V5KHN0b3JhZ2VLZXkgOiBzdHJpbmcpIDogUHJvbWlzZTxUIHwgdW5kZWZpbmVkPiB7ICAgIFxyXG4gICAgICAgIC8vIEdldCBhIGxpc3Qgb2YgYWxsIHJlY29yZCBJRHMgaW4gdGhlIGluZGV4ICAgICAgICBcclxuICAgICAgICBsb2dnZXIuZGVidWcoYC0tLUNSVUQtUkVQTyA6IGdldFdpdGhTdG9yYWdlS2V5ID0+IHJldHJpZXZpbmcgYSByZWNvcmQgd2l0aCBzdG9yYWdlIGtleTogJHtzdG9yYWdlS2V5fWApOyBcclxuICAgIFxyXG4gICAgICAgIC8vIEF0dGVtcHQgdG8gcmV0cmlldmUgdGhlIE1vZGVsIGZyb20gdGhlIGJsb2NrY2hhaW4gXHJcbiAgICAgICAgbGV0IGJ1ZmZlciA6IEJ1ZmZlcjsgXHJcbiAgICAgICAgbG9nZ2VyLmRlYnVnKGAtLS1DUlVELVJFUE8gOiBnZXRXaXRoU3RvcmFnZUtleSA9PiByZWNvcmQgc3RvcmVkIGluIFBEQzogJHt0aGlzLnJlcXVpcmVQREN9YCk7XHJcbiAgICAgICAgaWYgKHRoaXMucmVxdWlyZVBEQykge1xyXG4gICAgICAgICAgICAvLyBHZXQgdGhlIFBEQyBuYW1lXHJcbiAgICAgICAgICAgIGNvbnN0IHBkY05hbWUgOiBzdHJpbmcgPSBhd2FpdCB0aGlzLnBkY1Jlc29sdmVyKHRoaXMuVENvbnRleHQpO1xyXG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoYC0tLUNSVUQtUkVQTyA6IGdldFdpdGhTdG9yYWdlS2V5ID0+IFBEQyBOYW1lOiAke3BkY05hbWV9YCk7XHJcblxyXG4gICAgICAgICAgICAvLyBHZXQgdGhlIGRhdGEgaW4gdGhlIFBEQyB3aXRoIHRoZSBtYXRjaGluZyBzdG9yYWdlS2V5XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBidWZmZXIgPSBhd2FpdCB0aGlzLlRDb250ZXh0LnN0dWIuZ2V0UHJpdmF0ZURhdGEocGRjTmFtZSwgc3RvcmFnZUtleSk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgeyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgLS0tQ1JVRC1SRVBPIDogZ2V0V2l0aFN0b3JhZ2VLZXkgPT4gRmFpbGVkIHRvIHJldHJpZXZlIHRoZSByZWNvcmQgZnJvbSB0aGUgUERDYCk7ICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGAtLS1DUlVELVJFUE8gOiBnZXRXaXRoU3RvcmFnZUtleSA9PiBFUlJPUjogJHtKU09OLnN0cmluZ2lmeShlcnIpfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGF3YWl0IHRoaXMuVENvbnRleHQuc3R1Yi5nZXRTdGF0ZShzdG9yYWdlS2V5KTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGAtLS1DUlVELVJFUE8gOiBnZXRXaXRoU3RvcmFnZUtleSA9PiBGYWlsZWQgdG8gcmV0cmlldmUgdGhlIHJlY29yZCBmcm9tIHRoZSBXb3JsZFN0YXRlYCk7ICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGAtLS1DUlVELVJFUE8gOiBnZXRXaXRoU3RvcmFnZUtleSA9PiBFUlJPUjogJHtKU09OLnN0cmluZ2lmeShlcnIpfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiB3ZSBkaWQgZmluZCBzb21ldGhpbmcsIHRoZW4gY29udmVydCB0aGUgdmFsdWUgZnJvbSB0aGUgYmxvY2tjaGFpbiBpbnRvIGEgTW9kZWwsIG90aGVyd2lzZSByZXR1cm4gdW5kZWZpbmVkXHJcbiAgICAgICAgaWYgKCEhYnVmZmVyICYmIGJ1ZmZlci5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgLS0tQ1JVRC1SRVBPIDogZ2V0V2l0aFN0b3JhZ2VLZXkgPT4gUmV0cmlldmVkIHRoZSByZWNvcmQgYnVmZmVyOiAke2J1ZmZlci50b1N0cmluZygpfWApOyAgICBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIGJ1ZmZlciByZXRyaWV2ZWQgZnJvbSB0aGUgYmxvY2tjaGFpbiBpbnRvIHRoZSBNb2RlbFxyXG4gICAgICAgICAgICBsZXQgcmV0dXJuTW9kZWwgOiBUO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuTW9kZWwgPSBuZXcgdGhpcy5UQ3JlYXRvcihKU09OLnBhcnNlKGJ1ZmZlci50b1N0cmluZygpKSBhcyBUKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoYC0tLUNSVUQtUkVQTyA6IGdldFdpdGhTdG9yYWdlS2V5ID0+IEZhaWxlZCB0byBjb252ZXJ0IHRoZSByZWNvcmQgZnJvbSB0aGUgcmV0cmlldmVkIGJ1ZmZlcmApOyAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgLS0tQ1JVRC1SRVBPIDogZ2V0V2l0aFN0b3JhZ2VLZXkgPT4gRVJST1I6ICR7SlNPTi5zdHJpbmdpZnkoZXJyKX1gKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGAtLS1DUlVELVJFUE8gOiBnZXRXaXRoU3RvcmFnZUtleSA9PiBSZXRyaWV2ZWQgdGhlIE1vZGVsIHN1Y2Nlc3NmdWxseWApOyAgXHJcbiAgICAgICAgICAgIHJldHVybiByZXR1cm5Nb2RlbDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBmaW5kKHJlY29yZElEczogc3RyaW5nW10gPSBbXSkgOiBQcm9taXNlPFRbXT4geyBcclxuICAgICAgICBsZXQgcmV0dXJuUmVzdWx0IDogVFtdID0gW107XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQXR0ZW1wdCB0byByZXRyaWV2ZSB0aGUgTW9kZWwgbGlzdCBmcm9tIHRoZSBibG9ja2NoYWluIFxyXG4gICAgICAgIGxldCBpdGVyYXRvciA6IEl0ZXJhdG9ycy5TdGF0ZVF1ZXJ5SXRlcmF0b3I7IFxyXG4gICAgICAgIGlmICh0aGlzLnJlcXVpcmVQREMpIHtcclxuICAgICAgICAgICAgLy8gR2V0IHRoZSBQREMgbmFtZVxyXG4gICAgICAgICAgICBjb25zdCBwZGNOYW1lIDogc3RyaW5nID0gYXdhaXQgdGhpcy5wZGNSZXNvbHZlcih0aGlzLlRDb250ZXh0KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFNlYXJjaCBmb3IgdGhlIGRhdGEgaW4gdGhlIFBEQyB3aXRoIGEgbWF0Y2hpbmcgcGFydGlhbCBzdG9yYWdlIGtleSAgICBcclxuICAgICAgICAgICAgaXRlcmF0b3IgPSBhd2FpdCB0aGlzLlRDb250ZXh0LnN0dWIuZ2V0UHJpdmF0ZURhdGFCeVBhcnRpYWxDb21wb3NpdGVLZXkocGRjTmFtZSwgdGhpc1snb2JqZWN0VHlwZSddLCByZWNvcmRJRHMpO1xyXG4gICAgICAgICAgICBpZiAoaXRlcmF0b3JbJ2l0ZXJhdG9yJ10gIT09IHVuZGVmaW5lZCkgeyBpdGVyYXRvciA9IGl0ZXJhdG9yWydpdGVyYXRvciddOyB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaXRlcmF0b3IgPSBhd2FpdCB0aGlzLlRDb250ZXh0LnN0dWIuZ2V0U3RhdGVCeVBhcnRpYWxDb21wb3NpdGVLZXkodGhpc1snb2JqZWN0VHlwZSddLCByZWNvcmRJRHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ29sbGVjdCBhbGwgdGhlIHJlc3VsdHMgZnJvbSB0aGUgaXRlcmF0b3JcclxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBuZXh0UmVzdWx0IDogSXRlcmF0b3JzLk5leHRSZXN1bHQgPSBhd2FpdCBpdGVyYXRvci5uZXh0KCk7XHJcbiAgICAgICAgICAgIGlmIChuZXh0UmVzdWx0LnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBkaWQgZmluZCBzb21ldGhpbmcsIHRoZW4gY29udmVydCB0aGUgdmFsdWUgZnJvbSB0aGUgYmxvY2tjaGFpbiBpbnRvIGEgTW9kZWwsIG90aGVyd2lzZSByZXR1cm4gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dFJlc3VsdC52YWx1ZS52YWx1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgYnVmZmVyIHJldHJpZXZlZCBmcm9tIHRoZSBibG9ja2NoYWluIGludG8gdGhlIE1vZGVsXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmV0dXJuTW9kZWwgOiBUID0gbmV3IHRoaXMuVENyZWF0b3IoSlNPTi5wYXJzZShuZXh0UmVzdWx0LnZhbHVlLnZhbHVlLnRvU3RyaW5nKCd1dGY4JykpIGFzIFQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblJlc3VsdC5wdXNoKHJldHVybk1vZGVsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gY2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgcmVhY2hlZCB0aGVuIGVuZFxyXG4gICAgICAgICAgICBpZiAobmV4dFJlc3VsdC5kb25lKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBleHBsaWNpdGx5IGNsb3NlIHRoZSBpdGVyYXRvciAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgYXdhaXQgaXRlcmF0b3IuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiByZXR1cm5SZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGRlbGV0ZShyZWNvcmRJRDogc3RyaW5nKSA6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIC8vIEdldCB0aGUgc3RvcmFnZSBrZXkgZm9yIHRoZSBNb2RlbFxyXG4gICAgICAgIGNvbnN0IHN0b3JhZ2VLZXkgOiBzdHJpbmcgPSB0aGlzLmdldFN0b3JhZ2VLZXkocmVjb3JkSUQpO1xyXG5cclxuICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIE1vZGVsIGV4aXN0cyBpbiB0aGUgYmxvY2tjaGFpblxyXG4gICAgICAgIGNvbnN0IGV4aXN0cyA9IGF3YWl0IHRoaXMuZXhpc3RzV2l0aFN0b3JhZ2VLZXkoc3RvcmFnZUtleSk7XHJcbiAgICAgICAgaWYgKCFleGlzdHMpIHtcclxuICAgICAgICAgICAgLy8gVGhlIGZ1bmN0aW9uIHN1Y2NlZWRlZCwgYnV0IHdlIGRpZCBub3QgZGVsZXRlIGFueXRoaW5nLCBzbyByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJlcXVpcmVQREMpIHtcclxuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgUERDIG5hbWVcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBkY05hbWUgOiBzdHJpbmcgPSBhd2FpdCB0aGlzLnBkY1Jlc29sdmVyKHRoaXMuVENvbnRleHQpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIERlbGV0ZSB0aGUgZGF0YSBpbiB0aGUgUERDIHdpdGggdGhlIG1hdGNoaW5nIHN0b3JhZ2VLZXlcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuVENvbnRleHQuc3R1Yi5kZWxldGVQcml2YXRlRGF0YShwZGNOYW1lLCBzdG9yYWdlS2V5KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuVENvbnRleHQuc3R1Yi5kZWxldGVTdGF0ZShzdG9yYWdlS2V5KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gVGhlIGZ1bmN0aW9uIHN1Y2NlZWRlZCwgYW5kIHdlIGRlbGV0ZWQgc29tZXRoaW5nLCBzbyByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGRlbGV0ZU1hbnkoc2VhcmNoS2V5OiBzdHJpbmcpIDogUHJvbWlzZTxudW1iZXI+IHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VSUk9SOiBkZWxldGVNYW55IGhhcyBub3QgYmVlbiBpbXBsZW1lbnRlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIFxyXG59Il19