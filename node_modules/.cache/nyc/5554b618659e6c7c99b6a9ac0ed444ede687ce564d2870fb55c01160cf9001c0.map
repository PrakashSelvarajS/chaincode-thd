{"version":3,"file":"C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\contracts\\adr-rule.contract.ts","sources":["C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\contracts\\adr-rule.contract.ts"],"names":[],"mappings":"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","sourcesContent":["import { Context, Contract, Info, Returns, Transaction, Param } from 'fabric-contract-api';\r\nimport { ADRRule, ADRRuleList } from \"../models\";\r\nimport { ADRRuleListRepository } from '../repositories';\r\n\r\n\r\n\r\n@Info({ title: 'ADRRuleContract', description: 'Contract for managing the \"Automated Dispute Resolution Rule\" data for a Vendor' })\r\nexport class ADRRuleContract extends Contract {\r\n\r\n\r\n    constructor() { super(\"com.homedepot.procurement.ADRRuleContract\"); }\r\n\r\n\r\n    @Transaction(false)\r\n    @Returns('ADRRule[]')\r\n    public async retrieveADRRules(ctx: Context): Promise<ADRRule[]> {\r\n        let repo: ADRRuleListRepository = new ADRRuleListRepository(ctx);\r\n        const ruleList: ADRRuleList = await repo.get();\r\n        if (ruleList === undefined || ruleList.Items === undefined || ruleList.Items.length == 0) {\r\n            throw new Error(`ERROR: No ADRRules exist in the blockchain for this Vendor`);\r\n        } else {\r\n            return ruleList.Items;\r\n        }\r\n    }\r\n\r\n\r\n    // Used to merge new ADR Rules with existing ADR Rules\r\n    @Transaction(true)\r\n    @Param(\"newADRRules\", \"ADRRule[]\")\r\n    @Returns('UnitOfMeasure[]')\r\n    public async saveADRRules(ctx: Context, newADRRules: ADRRule[]): Promise<ADRRule[]> {\r\n        // Check if there are existing ADR rules\r\n        let repo: ADRRuleListRepository = new ADRRuleListRepository(ctx);\r\n        let existingADRRuleslist: ADRRuleList = await repo.get();\r\n\r\n        let savedADRRules: ADRRule[] = [];\r\n\r\n        if (existingADRRuleslist === undefined || existingADRRuleslist.Items === undefined || existingADRRuleslist.Items.length === 0) {\r\n            //There are no existing ADRRules, create it\r\n            console.log('No ADRRules, adding all the provided ADRRules to the ledger');\r\n\r\n            let newADRRuleslist: ADRRuleList = new ADRRuleList();\r\n            newADRRuleslist.Items = newADRRules;\r\n            newADRRuleslist = await repo.create(newADRRuleslist);\r\n            savedADRRules = newADRRuleslist.Items;\r\n        } else {\r\n            for (let currentADRRule of newADRRules) {\r\n                const existingitemindex = existingADRRuleslist.Items.findIndex((v, i, l) => { return currentADRRule.RuleID == v.RuleID });\r\n\r\n                if (existingitemindex > -1) {\r\n                    //Replace existing ADR rule with the matching recieved ADR rule\r\n                    existingADRRuleslist.Items[existingitemindex] = currentADRRule;\r\n                    savedADRRules.push(currentADRRule);\r\n                }\r\n            }\r\n\r\n            // Get a list of ADRRules that are in the new list, but not in the existing list\r\n            let newADRRulesNotInExistingList: ADRRule[] = newADRRules.filter((v, i, l) => { return (existingADRRuleslist.Items.findIndex((vv, ii, ll) => { return v.RuleID == vv.RuleID; }) == -1); });\r\n            if (newADRRulesNotInExistingList.length > 0) {\r\n                existingADRRuleslist.Items.push(...newADRRulesNotInExistingList);\r\n                savedADRRules.push(...newADRRulesNotInExistingList)\r\n            }\r\n\r\n            existingADRRuleslist = await repo.update(existingADRRuleslist);\r\n        }\r\n\r\n        return savedADRRules;\r\n    }\r\n\r\n}"]}