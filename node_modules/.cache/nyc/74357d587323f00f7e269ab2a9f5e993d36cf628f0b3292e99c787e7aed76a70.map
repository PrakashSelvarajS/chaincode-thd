{"version":3,"file":"C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\purchase-order-contract.spec.ts","sources":["C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\purchase-order-contract.spec.ts"],"names":[],"mappings":";;AAAA,qDAAwE;AAExE,6BAA6B;AAC7B,mDAAmD;AAEnD,wCAAwC;AAGxC,IAAI,CAAC,MAAM,EAAE,CAAC;AACd,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;AACzB,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AAUpB,0BAA2C;AAG3C,MAAM,UAAU,GAAY,MAAM,CAAC;AACnC,MAAM,mBAAmB,GAAY,eAAe,CAAC;AAErD,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IAEnC,IAAI,QAA+B,CAAC;IACpC,IAAI,GAAgB,CAAC;IAErB,UAAU,CAAC,GAAG,EAAE;QACZ,mCAAmC;QACnC,QAAQ,GAAG,IAAI,yBAAqB,EAAE,CAAC;QACvC,GAAG,GAAG,IAAI,4BAAW,EAAE,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAEhC,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;YAC5E,IAAI,UAAU,GAAG,2BAAU,CAAC,gBAAgB,CAAC,WAAW,EAAE,GAAG,EAAE,mBAAmB,CAAC,CAAC;YACpF,IAAI,QAAQ,GAAsB,MAAM,QAAQ,CAAC,iBAAiB,CAAC,GAAG,EAAE,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YACpI,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,4BAAW,EAAE,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC7J,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uEAAuE,EAAE,KAAK,IAAI,EAAE;YACnF,IAAI,UAAU,GAAG,2BAAU,CAAC,gBAAgB,CAAC,WAAW,EAAE,GAAG,EAAE,mBAAmB,CAAC,CAAC;YACpF,IAAI,QAAQ,GAAsB,MAAM,QAAQ,CAAC,iBAAiB,CAAC,GAAG,EAAE,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YACpI,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,4BAAW,EAAE,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC7J,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sHAAsH,EAAE,KAAK,IAAI,EAAE;YAClI,IAAI,UAAU,GAAG,2BAAU,CAAC,gBAAgB,CAAC,WAAW,EAAE,GAAG,EAAE,mBAAmB,CAAC,CAAC;YACpF,IAAI,QAAQ,GAAsB,MAAM,QAAQ,CAAC,iBAAiB,CAAC,GAAG,EAAE,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YACpI,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,4BAAW,EAAE,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC7J,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iEAAiE,EAAE,KAAK,IAAI,EAAE;YAC7E,IAAI,UAAU,GAAG,2BAAU,CAAC,gBAAgB,CAAC,WAAW,EAAE,GAAG,EAAE,mBAAmB,CAAC,CAAC;YACpF,IAAI,QAAQ,GAAsB,MAAM,QAAQ,CAAC,iBAAiB,CAAC,GAAG,EAAE,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YACpI,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,4BAAW,EAAE,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC7J,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC7D,IAAI,YAAY,GAAG,2BAAU,CAAC,gBAAgB,CAAC,uBAAuB,EAAE,GAAG,EAAE,mBAAmB,CAAC,CAAC;YAClG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAE/D,IAAI,aAAa,GAAG,2BAAU,CAAC,gBAAgB,CAAC,2BAA2B,EAAE,GAAG,EAAE,mBAAmB,CAAC,CAAC;YACvG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2FAA2F,EAAE,KAAK,IAAI,EAAE;YACvG,IAAI,UAAU,GAAG,2BAAU,CAAC,gBAAgB,CAAC,WAAW,EAAE,GAAG,EAAE,mBAAmB,CAAC,CAAC;YACpF,IAAI;gBACA,MAAM,QAAQ,CAAC,iBAAiB,CAAC,GAAG,EAAE,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;aACrG;YAAC,OAAM,CAAC,EAAE;gBACP,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC;aACjC;QACL,CAAC,CAAC,CAAC;IAEP,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC","sourcesContent":["import { TestHelper, TestContext, testPDCName } from './___test-helper';\r\n\r\nimport * as chai from 'chai';\r\nimport * as chaiAsPromised from 'chai-as-promised';\r\nimport * as sinon from 'sinon';\r\nimport * as sinonChai from 'sinon-chai';\r\nimport winston = require('winston');\r\n\r\nchai.should();\r\nchai.use(chaiAsPromised);\r\nchai.use(sinonChai);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { PurchaseOrderContract } from '..';\r\nimport { PurchaseOrder, AssetProcurement, UnitOfMeasure, Discrepancy, DiscrepancyType, StageType } from '../models';\r\n\r\nconst objectType : string = ' ap ';\r\nconst testconfigSubFolder : string = 'purchaseOrder';\r\n\r\ndescribe('PurchaseOrderContract', () => {\r\n\r\n    let contract: PurchaseOrderContract;\r\n    let ctx: TestContext;\r\n\r\n    beforeEach(() => {\r\n        // Prepare the Contract and Context\r\n        contract = new PurchaseOrderContract();\r\n        ctx = new TestContext();\r\n    });\r\n\r\n    describe('#savePurchaseOrder', () => {\r\n\r\n        it('BR-PO-001 should create a procurement record for new poNumbers', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-PO-001', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.savePurchaseOrder(ctx, testConfig.input.PONumber, testConfig.input.PurchaseOrders);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-PO-002 should update the procurement record for existing poNumbers', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-PO-002', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.savePurchaseOrder(ctx, testConfig.input.PONumber, testConfig.input.PurchaseOrders);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-PO-004 should log a SKUMissingFromUOM discrepancy when a purchaseOrder contains a SKU not in the current UOM data', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-PO-004', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.savePurchaseOrder(ctx, testConfig.input.PONumber, testConfig.input.PurchaseOrders);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-PO-005 should update PO SKU Description from UOM Description', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-PO-005', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.savePurchaseOrder(ctx, testConfig.input.PONumber, testConfig.input.PurchaseOrders);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-PO-006 should identify HomeFreight correctly', async () => {\r\n            let hfTestConfig = TestHelper.loadAPTestConfig('BR-PO-006-homefreight', ctx, testconfigSubFolder);\r\n            chai.expect(hfTestConfig.input.isHomeFreight()).to.equal(true);\r\n\r\n            let nhfTestConfig = TestHelper.loadAPTestConfig('BR-PO-006-non-homefreight', ctx, testconfigSubFolder);\r\n            chai.expect(nhfTestConfig.input.isHomeFreight()).to.equal(false);\r\n        });\r\n\r\n        it('BR-PO-007 should never contain a mixture of items to be shipped to multiple destinations ', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-PO-007', ctx, testconfigSubFolder);\r\n            try {\r\n                await contract.savePurchaseOrder(ctx, testConfig.input.PONumber, testConfig.input.PurchaseOrders);\r\n            } catch(e) {\r\n                chai.expect(e).to.not.be.null;\r\n            }\r\n        });\r\n\r\n    });\r\n\r\n});\r\n\r\n"]}