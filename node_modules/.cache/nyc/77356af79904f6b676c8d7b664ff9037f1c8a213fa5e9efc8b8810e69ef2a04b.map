{"version":3,"file":"C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\logger.ts","sources":["C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\logger.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n# Copyright IBM Corp. All Rights Reserved.\r\n#\r\n# SPDX-License-Identifier: Apache-2.0\r\n*/\r\n'use strict';\r\n\r\nconst winston = require('winston');\r\nconst loggers = { _ : null };\r\nconst SPLAT = Symbol.for('splat');\r\nconst util = require('util');\r\nconst safeStringify = require('fast-safe-stringify');\r\n// looks odd, but this is the most efficient way of padding strings in js\r\nconst padding = '                                               ';\r\n\r\n// define the formatter for Winston\r\n// this is aimed at being a singleton\r\nconst formatter = name => winston.format.combine(\r\n    winston.format.timestamp(),\r\n    winston.format.metadata({fillExcept: ['message', 'level', 'timestamp', 'label']}),\r\n    winston.format.colorize(),\r\n    winston.format.padLevels(),\r\n    winston.format.printf((info) => {\r\n        const {timestamp, level, message} = info;\r\n        const str = (`[disputesCC:${name}]` + padding).substring(0, padding.length);\r\n        let out = '';\r\n        if (info[SPLAT]) {\r\n            out = info[SPLAT].map(e => {\r\n                if (e && e.error) {\r\n                    if (e.error.stack) {\r\n                        return e.error.stack;\r\n                    } else {\r\n                        return e.error.message;\r\n                    }\r\n                } else {\r\n                    return safeStringify(e);\r\n                }\r\n            });\r\n        }\r\n        return `${timestamp} ${level} ${str} ${message} ${out} `;\r\n    }\r\n    )\r\n);\r\n\r\n// a console based transport, again a singleton\r\nlet transport;\r\nconst getTransport = () => {\r\n    if (!transport) {\r\n        transport = new winston.transports.Console({\r\n            handleExceptions: false,\r\n        });\r\n    }\r\n    return transport;\r\n};\r\n\r\n// create a logger\r\n// there is no hierachy or split of loggers; one for future versions\r\nfunction createLogger (loglevel, name) {\r\n    const logger = new winston.createLogger({\r\n        level: loglevel,\r\n        format: formatter(name),\r\n        transports: [\r\n            getTransport()\r\n        ],\r\n        exitOnError: false\r\n    });\r\n    return logger;\r\n}\r\n\r\n// map the Hyperledger Fabric standard strings to the matching Winston ones\r\nconst levelMapping = (level) => {\r\n    let loglevel = 'info';\r\n    if (typeof level === 'string') {\r\n        switch (level.toUpperCase()) {\r\n            case 'CRITICAL':\r\n                loglevel = 'fatal';\r\n                break;\r\n            case 'ERROR':\r\n                loglevel = 'error';\r\n                break;\r\n            case 'WARNING':\r\n                loglevel = 'warn';\r\n                break;\r\n            case 'DEBUG':\r\n                loglevel = 'debug';\r\n                break;\r\n            case 'INFO':\r\n                loglevel = 'info';\r\n        }\r\n    }\r\n    return loglevel;\r\n};\r\n\r\n// Exported function to get the logger for a given name\r\nexport function getLogger(name = '') {\r\n    // set the logging level based on the environment variable\r\n    // configured by the peer\r\n    const loglevel = levelMapping(process.env.CORE_CHAINCODE_LOGGING_LEVEL);\r\n    let logger;\r\n\r\n    if (loggers[name]) {\r\n        logger = loggers[name];\r\n        logger.level = loglevel;\r\n    } else {\r\n        logger = createLogger(loglevel, name);\r\n        loggers[name] = logger;\r\n    }\r\n\r\n    return logger;\r\n};\r\n\r\n// Specifically set the logging level\r\nexport function setLevel(level) {\r\n    // set the level of all the loggers currently active\r\n    const loglevel = levelMapping(level);\r\n    process.env.CORE_CHAINCODE_LOGGING_LEVEL = loglevel;\r\n\r\n    Object.keys(loggers).forEach((name) => {\r\n        loggers[name].level = loglevel;\r\n    });\r\n};\r\n\r\n\r\n// This function is intended for once only use; it will setup a logger\r\n// that will response to the unhanldedExceptions and the unhandledRejections\r\n// Having too many transports that have handleExceptions = true results in\r\n// node warnings about memory leaks.\r\nfunction firstTime () {\r\n    if (loggers._ === null) {\r\n        const loglevel = levelMapping(process.env.CORE_CHAINCODE_LOGGING_LEVEL);\r\n        loggers._ = new winston.createLogger({\r\n            level: loglevel,\r\n            format: formatter('_'),\r\n            transports: [\r\n                new winston.transports.Console({\r\n                    handleExceptions: true,\r\n                })\r\n            ],\r\n            exitOnError: false\r\n        });\r\n\r\n\r\n        process.on('unhandledRejection', (reason, p) => {\r\n            loggers._.error('Unhandled Rejection reason ' + reason + ' promise ' + util.inspect(p));\r\n        });\r\n\r\n    }\r\n}\r\nfirstTime();"]}