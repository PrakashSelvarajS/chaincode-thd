{"version":3,"file":"C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\contracts\\asset-procurement.contract.ts","sources":["C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\contracts\\asset-procurement.contract.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,6DAA2F;AAC3F,sCAAqG;AACrG,kDAAiH;AACjH,4DAAwD;AAKxD,IAAa,wBAAwB,GAArC,MAAa,wBAAyB,SAAQ,8BAAQ;IAGlD,gBAAgB,KAAK,CAAC,oDAAoD,CAAC,CAAC,CAAC,CAAC;IAMvE,KAAK,CAAC,wBAAwB,CAAC,GAAY,EAAE,QAAgB;QAChE,IAAI,IAAI,GAAgC,IAAI,yCAA0B,CAAC,GAAG,CAAC,CAAC;QAC5E,MAAM,EAAE,GAAkC,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACnE,IAAI,CAAC,EAAE,EAAE;YACL,MAAM,IAAI,KAAK,CAAC,mDAAmD,QAAQ,iBAAiB,CAAC,CAAC;SACjG;aAAM;YACH,OAAO,EAAE,CAAC;SACb;IACL,CAAC;IAKM,KAAK,CAAC,yBAAyB,CAAC,GAAY,EAAE,QAAgB;QACjE,IAAI,IAAI,GAAgC,IAAI,yCAA0B,CAAC,GAAG,CAAC,CAAC;QAC5E,MAAM,EAAE,GAAkC,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACnE,IAAI,CAAC,EAAE,EAAE;YACL,MAAM,IAAI,KAAK,CAAC,mDAAmD,QAAQ,iBAAiB,CAAC,CAAC;SACjG;QAED,qCAAqC;QACrC,IAAI,OAAO,GAAmC,MAAM,CAAC,IAAI,0CAA2B,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;QACjG,IAAI,OAAO,KAAK,SAAS,EAAC;YAAE,OAAO,GAAG,IAAI,0BAAiB,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;SAAE;QAE7E,qCAAqC;QACrC,IAAI,WAAW,GAA6B,MAAM,CAAC,IAAI,oCAAqB,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;QACzF,IAAI,WAAW,KAAK,SAAS,EAAC;YAAE,WAAW,GAAG,IAAI,oBAAW,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;SAAE;QAE/E,gEAAgE;QAChE,IAAI,SAAS,GAAsB,oCAAgB,CAAC,eAAe,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,WAAW,EAAE,CAAE,CAAC;QAEnG,sCAAsC;QACtC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACvB,OAAO,SAAS,CAAC;IACrB,CAAC;CAEJ,CAAA;AApCG;IAHC,iCAAW,CAAC,KAAK,CAAC;IAClB,2BAAK,CAAC,UAAU,EAAE,QAAQ,CAAC;IAC3B,6BAAO,CAAC,kBAAkB,CAAC;;qCACe,6BAAO;;wEAQjD;AAKD;IAHC,iCAAW,CAAC,IAAI,CAAC;IACjB,2BAAK,CAAC,UAAU,EAAE,QAAQ,CAAC;IAC3B,6BAAO,CAAC,kBAAkB,CAAC;;qCACgB,6BAAO;;yEAqBlD;AA3CQ,wBAAwB;IADpC,0BAAI,CAAC,EAAE,KAAK,EAAE,0BAA0B,EAAE,WAAW,EAAE,iEAAiE,EAAE,CAAC;;GAC/G,wBAAwB,CA6CpC;AA7CY,4DAAwB","sourcesContent":["import { Context, Contract, Info, Returns, Transaction, Param } from 'fabric-contract-api';\r\nimport { AssetProcurement, UnitOfMeasure, UnitOfMeasureList, ADRRuleList, ADRRule } from \"../models\";\r\nimport { AssetProcurementRepository, UnitOfMeasureListRepository, ADRRuleListRepository } from '../repositories';\r\nimport { ProcessingEngine } from '../processing-engine';\r\n\r\n\r\n\r\n@Info({ title: 'AssetProcurementContract', description: 'Contract for managing the \"Asset Procurement\" data for a Vendor' })\r\nexport class AssetProcurementContract extends Contract {\r\n\r\n\r\n    constructor() { super(\"com.homedepot.procurement.AssetProcurementContract\"); }\r\n\r\n\r\n    @Transaction(false)\r\n    @Param(\"poNumber\", \"string\")\r\n    @Returns('AssetProcurement')\r\n    public async retrieveAssetProcurement(ctx: Context, poNumber: string): Promise<AssetProcurement> {\r\n        let repo : AssetProcurementRepository = new AssetProcurementRepository(ctx);\r\n        const ap : AssetProcurement | undefined = await repo.get(poNumber);\r\n        if (!ap) {\r\n            throw new Error(`ERROR: An AssetProcurement record with PONumber ${poNumber} does not exist`);\r\n        } else {\r\n            return ap;\r\n        }\r\n    }\r\n\r\n    @Transaction(true)\r\n    @Param(\"poNumber\", \"string\")\r\n    @Returns('AssetProcurement')\r\n    public async reprocessAssetProcurement(ctx: Context, poNumber: string): Promise<AssetProcurement> {\r\n        let repo : AssetProcurementRepository = new AssetProcurementRepository(ctx);\r\n        const ap : AssetProcurement | undefined = await repo.get(poNumber);\r\n        if (!ap) {\r\n            throw new Error(`ERROR: An AssetProcurement record with PONumber ${poNumber} does not exist`);\r\n        }\r\n\r\n        // Get the list of UnitOfMeasure data\r\n        let uomList : UnitOfMeasureList | undefined = await (new UnitOfMeasureListRepository(ctx)).get();\r\n        if (uomList === undefined){ uomList = new UnitOfMeasureList({ Items: [] }); }\r\n    \r\n        // Retrieve the current ADR Rule data\r\n        let adrRuleList : ADRRuleList | undefined = await (new ADRRuleListRepository(ctx)).get();\r\n        if (adrRuleList === undefined){ adrRuleList = new ADRRuleList({ Items: [] }); }\r\n\r\n        // Create a processing engine and process the Procurement record\r\n        let updatedAP : AssetProcurement = ProcessingEngine.startProcessing(ap, { uomList, adrRuleList } );\r\n\r\n        // Save the updated Procurement record\r\n        repo.update(updatedAP);\r\n        return updatedAP;\r\n    }\r\n\r\n}"]}