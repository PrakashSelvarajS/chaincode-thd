{"version":3,"file":"C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\ifc-received-contract.spec.ts","sources":["C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\ifc-received-contract.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { TestHelper, TestContext, testPDCName } from './___test-helper';\r\n\r\nimport * as chai from 'chai';\r\nimport * as chaiAsPromised from 'chai-as-promised';\r\nimport * as sinon from 'sinon';\r\nimport * as sinonChai from 'sinon-chai';\r\nimport winston = require('winston');\r\n\r\nchai.should();\r\nchai.use(chaiAsPromised);\r\nchai.use(sinonChai);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { IFCReceivedContract } from '..';\r\nimport { IFCReceived, AssetProcurement, UnitOfMeasure, Discrepancy, DiscrepancyType, StageType } from '../models';\r\n\r\nconst objectType : string = ' ap ';\r\nconst testconfigSubFolder : string = 'ifcReceived';\r\n\r\ndescribe('IFCReceivedContract', () => {\r\n\r\n    let contract: IFCReceivedContract;\r\n    let ctx: TestContext;\r\n\r\n    beforeEach(() => {\r\n        // Prepare the Contract and Context\r\n        contract = new IFCReceivedContract();\r\n        ctx = new TestContext();\r\n    });\r\n\r\n    describe('#saveIFCReceived', () => {\r\n\r\n        it('BR-IR-001 should create a procurement record for new poNumbers', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IR-001', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCReceived(ctx, testConfig.input.PONumber, testConfig.input.IFCReceiveds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IR-002 should add unique new IFC Received data into previous imported data', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IR-002', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCReceived(ctx, testConfig.input.PONumber, testConfig.input.IFCReceiveds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IR-003 should replace matching, existing IFC Received data with new imported data', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IR-003', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCReceived(ctx, testConfig.input.PONumber, testConfig.input.IFCReceiveds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IR-004 should uniquely identify IFC Received data for matching new data with existing data', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IR-004', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCReceived(ctx, testConfig.input.PONumber, testConfig.input.IFCReceiveds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IR-005 should aggregate Quantity of a SKU on the same UCC128, destined for the same RDC', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IR-005', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCReceived(ctx, testConfig.input.PONumber, testConfig.input.IFCReceiveds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IR-006 should flag when the PurchaseOrder data is missing for this PO Number (Missing PO)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IR-006', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCReceived(ctx, testConfig.input.PONumber, testConfig.input.IFCReceiveds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IR-007 should flag when the Vendor Shipped data is missing for this PO Number (Missing Vendor Shipped)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IR-007', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCReceived(ctx, testConfig.input.PONumber, testConfig.input.IFCReceiveds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IR-008 should flag when the IFC received a SKU from Vendor that was not on the PO (Wrong SKU)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IR-008', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCReceived(ctx, testConfig.input.PONumber, testConfig.input.IFCReceiveds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IR-009 should flag when the IFC received a SKU destined for an RDC different from PO (Wrong RDC)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IR-009', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCReceived(ctx, testConfig.input.PONumber, testConfig.input.IFCReceiveds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IR-010 should flag when the IFC received less SKU Quantity from Vendor than Vendor Shipped (Shortage)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IR-010', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCReceived(ctx, testConfig.input.PONumber, testConfig.input.IFCReceiveds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IR-011 should flag when the IFC received more SKU Quantity from Vendor than Vendor Shipped (Overage)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IR-011', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCReceived(ctx, testConfig.input.PONumber, testConfig.input.IFCReceiveds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IR-012 should flag when the IFC did not receive a UCC for an RDC, from the Vendor (Missing Pallet)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IR-012', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCReceived(ctx, testConfig.input.PONumber, testConfig.input.IFCReceiveds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n        it('BR-IR-013 should flag when the IFC received any extra UCC’s for the RDC, from the Vendor (Additional Pallet)', async () => {\r\n            let testConfig = TestHelper.loadAPTestConfig('BR-IR-013', ctx, testconfigSubFolder);\r\n            let resultAP : AssetProcurement = await contract.saveIFCReceived(ctx, testConfig.input.PONumber, testConfig.input.IFCReceiveds);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWith(testPDCName, objectType + testConfig.input.PONumber, Buffer.from(JSON.stringify(testConfig.output)));\r\n            chai.expect(testConfig.output).to.deep.equal(resultAP);\r\n        });\r\n\r\n    });\r\n\r\n});\r\n\r\n"]}