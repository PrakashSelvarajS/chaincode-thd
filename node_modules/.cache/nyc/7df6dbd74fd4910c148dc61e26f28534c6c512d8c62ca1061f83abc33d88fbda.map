{"version":3,"file":"C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\contracts\\purchase-order.contract.ts","sources":["C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\contracts\\purchase-order.contract.ts"],"names":[],"mappings":"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","sourcesContent":["import { Context, Contract, Info, Returns, Transaction, Param } from 'fabric-contract-api';\r\nimport { PurchaseOrder, AssetProcurement, StageType, UnitOfMeasure, UnitOfMeasureList, ADRRule, ADRRuleList, PurchaseOrderList } from \"../models\";\r\nimport { AssetProcurementRepository, UnitOfMeasureListRepository, ADRRuleListRepository } from '../repositories';\r\nimport { ProcessingEngine } from '../processing-engine';\r\n\r\nconst Logger = require('../logger');\r\nconst logger = Logger.getLogger('./contracts/purchase-order.contract.ts');\r\n\r\n\r\n@Info({ title: 'PurchaseOrderContract', description: 'Contract for managing the list of PurchaseOrders, and their related discrepancies' })\r\nexport class PurchaseOrderContract extends Contract {\r\n\r\n\r\n    constructor() { super(\"com.homedepot.procurement.PurchaseOrderContract\"); }\r\n\r\n\r\n    // Used to bulk merge several PurchaseOrders of new PurchaseOrder data with existing PurchaseOrder data\r\n    @Transaction()\r\n    @Param(\"newListOfPurchaseOrderLists\", \"PurchaseOrderList[]\")\r\n    @Returns('AssetProcurement[]')    \r\n    public async bulkSavePurchaseOrders(ctx: Context, newListOfPurchaseOrderLists: PurchaseOrderList[]): Promise<AssetProcurement[]> {  \r\n        try {\r\n            // Sanity-checks: polist.length > 0\r\n            if (newListOfPurchaseOrderLists.length === 0){ \r\n                throw new Error(`bulkSavePurchaseOrders was called with 0 PurchaseOrders`);\r\n            }\r\n\r\n            // Add each set of PO items to the blockchain, one PONumber at a time\r\n            let aps : AssetProcurement[] = [];\r\n            for (let poList of newListOfPurchaseOrderLists) {\r\n                let currentSaveAP : AssetProcurement = await this.savePurchaseOrder(ctx, poList.PONumber, poList.Items);\r\n                aps.push(currentSaveAP);\r\n            }\r\n\r\n            return aps;\r\n        } catch (e) {\r\n            logger.error(`bulkSavePurchaseOrders failed`);\r\n            logger.error(e);\r\n            return;\r\n        }\r\n    }\r\n\r\n\r\n    // Used to merge new PurchaseOrder data with existing PurchaseOrder data\r\n    @Transaction()\r\n    @Param(\"poNumber\", \"string\")\r\n    @Param(\"newPurchaseOrderList\", \"PurchaseOrder[]\")\r\n    @Returns('AssetProcurement')    \r\n    public async savePurchaseOrder(ctx: Context, poNumber: string, newPurchaseOrderList: PurchaseOrder[]): Promise<AssetProcurement> {  \r\n        try {\r\n            // Sanity-checks: polist.length > 0, all items in polist have PONumber=poNumber\r\n            poNumber = poNumber.trim();\r\n            if (newPurchaseOrderList.length === 0){ \r\n                throw new Error(`savePurchaseOrder was called with 0 PurchaseOrder items, for PONumber '${poNumber}'`);\r\n            }\r\n            if (newPurchaseOrderList.some((v,i,l)=>{ return (v.PONumber != poNumber); })) {\r\n                throw new Error(`savePurchaseOrder was called with some PurchaseOrder items that do not have PONUmber '${poNumber}`);\r\n            }\r\n\r\n            let apRepo : AssetProcurementRepository = new AssetProcurementRepository(ctx);\r\n            \r\n            // Retrieve or create the AssetProcurement record\r\n            let ap : AssetProcurement = new AssetProcurement({ PONumber: poNumber });\r\n            let apIsNew : boolean = true;\r\n            if (await apRepo.exists(poNumber) == true) {\r\n                logger.debug(`PONumber ${poNumber} exists`);\r\n                ap = await apRepo.get(poNumber);\r\n                apIsNew = false;\r\n                logger.debug('Retreived AP from storage');\r\n                logger.debug(ap.PurchaseOrders.length);\r\n            }\r\n\r\n            // Get the list of UnitOfMeasure data\r\n            logger.debug('Retrieving UOM data from storage');\r\n            let uomList : UnitOfMeasureList | undefined = await (new UnitOfMeasureListRepository(ctx)).get();\r\n            if (uomList === undefined){ uomList = new UnitOfMeasureList({ Items: [] }); }\r\n            logger.debug(uomList.Items.length);\r\n        \r\n            // Retrieve the current ADR Rule data\r\n            logger.debug('Retrieving ADR Rules from storage');\r\n            let adrRuleList : ADRRuleList | undefined = await (new ADRRuleListRepository(ctx)).get();\r\n            if (adrRuleList === undefined){ adrRuleList = new ADRRuleList({ Items: [] }); }\r\n            logger.debug(adrRuleList.Items.length);\r\n            \r\n            // Merge the existing PurchaseOrder data with the new data\r\n            logger.debug('We ' + ((ap.PurchaseOrders !== undefined && ap.PurchaseOrders.length > 0) ? 'have' : 'do not have') + ' PO data for the AP');\r\n            if (ap.PurchaseOrders !== undefined && ap.PurchaseOrders.length > 0) {\r\n                // Merge any records that match on key identifier fields\r\n                logger.debug(`Starting with ${newPurchaseOrderList.length} new PurchaseOrders`);\r\n                newPurchaseOrderList.forEach((vc,ic,lc)=>{\r\n                    let existingRecordIndex = ap.PurchaseOrders!.findIndex((innerVC,innerIC,innerLC)=>{\r\n                        return vc.IFCDC==innerVC.IFCDC && vc.RDC==innerVC.RDC && vc.SKU == innerVC.SKU && vc.SKUGTIN == innerVC.SKUGTIN && vc.Quantity==innerVC.Quantity && vc.CreatedDateTime==innerVC.CreatedDateTime;\r\n                    });\r\n                    if (existingRecordIndex > -1) { \r\n                        logger.debug('Found a new PO that matched an existing one'); \r\n                        ap.PurchaseOrders![existingRecordIndex] = vc;\r\n                    }\r\n                });\r\n\r\n                // Deterimine all records that are new and do not match any existing records\r\n                let uniquePOs : PurchaseOrder[] = newPurchaseOrderList.reduce((pac:PurchaseOrder[],vc,ic,lc)=>{\r\n                    let existingRecordIndex = ap.PurchaseOrders!.findIndex((innerVC,innerIC,innerLC)=>{\r\n                        return vc.IFCDC==innerVC.IFCDC && vc.RDC==innerVC.RDC && vc.SKU == innerVC.SKU && vc.SKUGTIN == innerVC.SKUGTIN && vc.Quantity==innerVC.Quantity && vc.CreatedDateTime==innerVC.CreatedDateTime;\r\n                    });\r\n                    if (existingRecordIndex == -1) { \r\n                        logger.debug('Found a new PO that does not match the existing ones'); \r\n                        pac.push(vc); \r\n                    }\r\n                    return pac;\r\n                }, []);\r\n                logger.debug(`Ended up with ${uniquePOs.length} totally new PurchaseOrders`);\r\n  \r\n                // If we found some new records to add, Append new records to the existing ones\r\n                if (uniquePOs.length > 0) {\r\n                    logger.debug('Adding the final list of unique POs to the existing list of POs');\r\n                    ap.PurchaseOrders.push(...uniquePOs);\r\n                }              \r\n            } else {\r\n                logger.debug('Adding all new POs since there are no existing POs.');\r\n                ap.setStageDetails(StageType.PurchaseOrdered, newPurchaseOrderList);\r\n            }\r\n\r\n            // Make sure that all PO items are heading to the same IFCDC / RDC\r\n            let destinations : {ifcdc:string,rdc:string}[] = ap.PurchaseOrders.reduce((p:{ifcdc:string,rdc:string}[], v, i, l)=>{\r\n                if (p.findIndex((vv,ii,ll)=>{ return vv.ifcdc == v.IFCDC && vv.rdc == v.RDC; }) == -1) {\r\n                    p.push({ifcdc:v.IFCDC,rdc:v.RDC});\r\n                }\r\n                return p;\r\n            }, []);\r\n            if (destinations.length > 1) {\r\n                let errorMessage : string = `savePurchaseOrder was called for PONUmber '${poNumber} with some PurchaseOrder items that are being shipped to multiple destinations`;\r\n                destinations.forEach((v,i,l)=>{\r\n                    errorMessage += `\\nIFCDC : ${v.ifcdc}, RDC : ${v.rdc}`;\r\n                })\r\n                throw new Error(errorMessage);\r\n            }\r\n            \r\n            // Make sure the provided PO data descriptions match their UOM descriptions\r\n            logger.debug('Updating POs to use their UOM descriptions');\r\n            ap.PurchaseOrders.forEach((v,i,l)=>{\r\n                let uomItemIndex : number = uomList.Items.findIndex((vu,iu,lu)=>{ return (vu.SKU == v.SKU); });\r\n                if (uomItemIndex > -1 && v.Description != uomList.Items[uomItemIndex].Description) { v.Description = uomList.Items[uomItemIndex].Description; }\r\n            }); \r\n\r\n            // Run this through the processing engine (FSM)\r\n            logger.debug('Starting the processing engine');\r\n            let updatedAP : AssetProcurement = ProcessingEngine.startProcessing(ap, { uomList, adrRuleList });\r\n            logger.debug('Finished the processing engine');\r\n            \r\n            // Save the AssetProcurement record\r\n            if (apIsNew) {\r\n                logger.debug('Attempting to create a new AP');\r\n                await apRepo.create(updatedAP);\r\n            } else {\r\n                logger.debug('Attempting to update an existing AP');\r\n                await apRepo.update(updatedAP);\r\n            }\r\n\r\n            logger.debug(`savePurchaseOrder saved ${newPurchaseOrderList.length} PurchaseOrder items for PONumber ${poNumber}`);\r\n            return updatedAP;\r\n        } catch (e) {\r\n            logger.error(`savePurchaseOrder failed for PONumber ${poNumber}`);\r\n            logger.error(e);\r\n            return;\r\n        }\r\n    }\r\n\r\n}"]}