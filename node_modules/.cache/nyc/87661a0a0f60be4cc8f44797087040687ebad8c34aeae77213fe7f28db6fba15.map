{"version":3,"file":"C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\contracts\\invoice.contract.ts","sources":["C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\contracts\\invoice.contract.ts"],"names":[],"mappings":"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","sourcesContent":["import { Context, Contract, Info, Returns, Transaction, Param } from 'fabric-contract-api';\r\nimport { Invoice, AssetProcurement, StageType, UnitOfMeasure, UnitOfMeasureList, ADRRule, ADRRuleList, InvoiceList } from \"../models\";\r\nimport { AssetProcurementRepository, UnitOfMeasureListRepository, ADRRuleListRepository } from '../repositories';\r\nimport { ProcessingEngine } from '../processing-engine';\r\n\r\nconst Logger = require('../logger');\r\nconst logger = Logger.getLogger('./contracts/ifc-shipped.contract.ts');\r\n\r\n\r\n@Info({ title: 'InvoiceContract', description: 'Contract for managing the list of Invoices, and their related discrepancies' })\r\nexport class InvoiceContract extends Contract {\r\n\r\n    constructor() { super(\"com.homedepot.procurement.InvoiceContract\"); }\r\n\r\n\r\n    // Used to bulk merge several records of new Invoice data with existing Invoice data\r\n    @Transaction()\r\n    @Param(\"newListOfInvoiceLists\", \"InvoiceList[]\")\r\n    @Returns('AssetProcurement[]')    \r\n    public async bulkSaveInvoice(ctx: Context, newListOfInvoiceLists: InvoiceList[]): Promise<AssetProcurement[]> {  \r\n        try {\r\n            // Sanity-checks: list.length > 0\r\n            if (newListOfInvoiceLists.length === 0){ \r\n                throw new Error(`bulkSaveInvoice was called with 0 Invoices`);\r\n            }\r\n\r\n            // Add each set of PO items to the blockchain, one PONumber at a time\r\n            let aps : AssetProcurement[] = [];\r\n            for (let currentItemsList of newListOfInvoiceLists) {\r\n                let currentSavedAP : AssetProcurement = await this.saveInvoice(ctx, currentItemsList.PONumber, currentItemsList.Items);\r\n                aps.push(currentSavedAP);\r\n            }\r\n\r\n            return aps;\r\n        } catch (e) {\r\n            logger.error(`bulkSaveInvoice failed`);\r\n            logger.error(e);\r\n            return;\r\n        }\r\n    }\r\n\r\n\r\n    // Used to merge new Invoice data with existing Invoice data\r\n    @Transaction()\r\n    @Param(\"poNumber\", \"string\")\r\n    @Param(\"newInvoiceList\", \"Invoice[]\")\r\n    @Returns('AssetProcurement')    \r\n    public async saveInvoice(ctx: Context, poNumber: string, newInvoiceList: Invoice[]): Promise<AssetProcurement> {  \r\n        try {\r\n            // Sanity-checks: invlist.length > 0, all items in invlist have PONumber=poNumber\r\n            poNumber = poNumber.trim();\r\n            if (newInvoiceList.length === 0){ \r\n                throw new Error(`saveInvoice was called with 0 Invoice items, for PONumber '${poNumber}'`);\r\n            }\r\n            if (newInvoiceList.some((v,i,l)=>{ return (v.PONumber != poNumber); })) {\r\n                throw new Error(`saveInvoice was called with some Invoice items that do not have PONUmber '${poNumber}`);\r\n            }\r\n\r\n            let apRepo : AssetProcurementRepository = new AssetProcurementRepository(ctx);\r\n            \r\n            // Retrieve or create the AssetProcurement record\r\n            let ap : AssetProcurement = new AssetProcurement({ PONumber: poNumber });\r\n            let apIsNew : boolean = true;\r\n            if (await apRepo.exists(poNumber) == true) {\r\n                logger.debug(`PONumber ${poNumber} exists`);\r\n                ap = await apRepo.get(poNumber);\r\n                apIsNew = false;\r\n                logger.debug('Retreived AP from storage');\r\n            }\r\n\r\n            // Get the list of UnitOfMeasure data\r\n            logger.debug('Retrieving UOM data from storage');\r\n            let uomList : UnitOfMeasureList | undefined = await (new UnitOfMeasureListRepository(ctx)).get();\r\n            if (uomList === undefined){ uomList = new UnitOfMeasureList({ Items: [] }); }\r\n            logger.debug(uomList.Items.length);\r\n        \r\n            // Retrieve the current ADR Rule data\r\n            logger.debug('Retrieving ADR Rules from storage');\r\n            let adrRuleList : ADRRuleList | undefined = await (new ADRRuleListRepository(ctx)).get();\r\n            if (adrRuleList === undefined){ adrRuleList = new ADRRuleList({ Items: [] }); }\r\n            logger.debug(adrRuleList.Items.length);\r\n            \r\n            // Merge the existing Invoice data with the new data\r\n            logger.debug('We ' + ((ap.Invoices !== undefined && ap.Invoices.length > 0) ? 'have' : 'do not have') + ' INV data for the AP');\r\n            if (ap.Invoices !== undefined && ap.Invoices.length > 0) {\r\n                // Merge any records that match on key identifier fields\r\n                logger.debug(`Starting with ${newInvoiceList.length} new Invoices`);\r\n                newInvoiceList.forEach((vc,ic,lc)=>{\r\n                    let existingRecordIndex = ap.Invoices!.findIndex((innerVC,innerIC,innerLC)=>{\r\n                        return vc.RDC==innerVC.RDC && vc.SKU == innerVC.SKU && vc.PONumber == innerVC.PONumber && vc.InvoiceNumber == innerVC.InvoiceNumber;\r\n                    });\r\n                    if (existingRecordIndex > -1) { \r\n                        logger.debug('Found a new INV that matched an existing one'); \r\n                        ap.Invoices![existingRecordIndex] = vc;\r\n                    }\r\n                });\r\n\r\n                // Deterimine all records that are new and do not match any existing records\r\n                let uniqueINVs : Invoice[] = newInvoiceList.reduce((pac:Invoice[],vc,ic,lc)=>{\r\n                    let existingRecordIndex = ap.Invoices!.findIndex((innerVC,innerIC,innerLC)=>{\r\n                        return vc.RDC==innerVC.RDC && vc.SKU == innerVC.SKU && vc.PONumber == innerVC.PONumber && vc.InvoiceNumber == innerVC.InvoiceNumber;\r\n                    });\r\n                    if (existingRecordIndex == -1) { \r\n                        logger.debug('Found a new INV that does not match the existing ones'); \r\n                        pac.push(vc); \r\n                    }\r\n                    return pac;\r\n                }, []);\r\n                logger.debug(`Ended up with ${uniqueINVs.length} totally new Invoices`);\r\n  \r\n                // If we found some new records to add, Append new records to the existing ones\r\n                if (uniqueINVs.length > 0) {\r\n                    logger.debug('Adding the final list of unique INVs to the existing list of INVs');\r\n                    ap.Invoices.push(...uniqueINVs);\r\n                }              \r\n            } else {\r\n                logger.debug('Adding all new INVs since there are no existing INVs.');\r\n                ap.setStageDetails(StageType.Invoiced, newInvoiceList);\r\n            }\r\n\r\n            // Run this through the processing engine (FSM)\r\n            logger.debug('Starting the processing engine');\r\n            let updatedAP : AssetProcurement = ProcessingEngine.startProcessing(ap, { uomList, adrRuleList });\r\n            logger.debug('Finished the processing engine');\r\n            \r\n            // Save the AssetProcurement record\r\n            if (apIsNew) {\r\n                logger.debug('Attempting to create a new AP');\r\n                await apRepo.create(updatedAP);\r\n            } else {\r\n                logger.debug('Attempting to update an existing AP');\r\n                await apRepo.update(updatedAP);\r\n            }\r\n\r\n            logger.debug(`saveInvoice saved ${newInvoiceList.length} Invoice items for PONumber ${poNumber}`);\r\n            return updatedAP;\r\n        } catch (e) {\r\n            logger.error(`saveInvoice failed for PONumber ${poNumber}`);\r\n            logger.error(e);\r\n            return;\r\n        }\r\n    }\r\n\r\n}"]}