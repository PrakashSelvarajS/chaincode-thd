{"version":3,"file":"C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\validator-config-contract.spec.ts","sources":["C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\validator-config-contract.spec.ts"],"names":[],"mappings":";;AACA,6CAAuE;AAIvE,6BAA6B;AAC7B,mDAAmD;AACnD,+BAA+B;AAC/B,wCAAwC;AACxC,mCAAoC;AAEpC,IAAI,CAAC,MAAM,EAAE,CAAC;AACd,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;AACzB,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AAEpB,MAAM,WAAW;IAAjB;QACW,SAAI,GAA8C,KAAK,CAAC,kBAAkB,CAAC,2BAAa,CAAC,CAAC;QAC1F,mBAAc,GAA+C,KAAK,CAAC,kBAAkB,CAAC,4BAAc,CAAC,CAAC;QACtG,YAAO,GAAG;YACb,SAAS,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,kBAAkB,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC,WAAW,CAAC,CAAC;YAC7F,QAAQ,EAAE,KAAK,CAAC,IAAI,EAAE;SACxB,CAAC;IACP,CAAC;CAAA;AASD,sFAAiF;AAGjF,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IAErC,IAAI,QAAiC,CAAC;IACtC,IAAI,GAAgB,CAAC;IAErB,UAAU,CAAC,GAAG,EAAE;QACZ,mCAAmC;QACnC,QAAQ,GAAG,IAAI,mDAAuB,EAAE,CAAC;QACzC,GAAG,GAAG,IAAI,WAAW,EAAE,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;QAEzC,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACnE,MAAM,QAAQ,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC;YAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IAEP,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC","sourcesContent":["import { Context } from 'fabric-contract-api';\r\nimport { ChaincodeStub, ClientIdentity, Iterators } from 'fabric-shim';\r\n\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport * as chai from 'chai';\r\nimport * as chaiAsPromised from 'chai-as-promised';\r\nimport * as sinon from 'sinon';\r\nimport * as sinonChai from 'sinon-chai';\r\nimport winston = require('winston');\r\n\r\nchai.should();\r\nchai.use(chaiAsPromised);\r\nchai.use(sinonChai);\r\n\r\nclass TestContext implements Context {\r\n    public stub: sinon.SinonStubbedInstance<ChaincodeStub> = sinon.createStubInstance(ChaincodeStub);\r\n    public clientIdentity: sinon.SinonStubbedInstance<ClientIdentity> = sinon.createStubInstance(ClientIdentity);\r\n    public logging = {\r\n        getLogger: sinon.stub().returns(sinon.createStubInstance(winston.createLogger().constructor)),\r\n        setLevel: sinon.stub(),\r\n     };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { ValidatorConfigContract } from '../contracts/validator-config.contract';\r\nimport { ValidatorConfig, NumberRangeConfig } from '../decorators/property-validator.decorator';\r\n\r\ndescribe('ValidatorConfigContract', () => {\r\n\r\n    let contract: ValidatorConfigContract;\r\n    let ctx: TestContext;\r\n\r\n    beforeEach(() => {\r\n        // Prepare the Contract and Context\r\n        contract = new ValidatorConfigContract();\r\n        ctx = new TestContext();\r\n    });\r\n\r\n    describe('#logCurrentValidationConfig', () => {\r\n\r\n        it('should print all current validator configs to the log', async () => {\r\n            await contract.logCurrentValidationConfig(ctx);\r\n            chai.expect(true).to.equal(true);\r\n        });\r\n\r\n    });\r\n\r\n});\r\n"]}