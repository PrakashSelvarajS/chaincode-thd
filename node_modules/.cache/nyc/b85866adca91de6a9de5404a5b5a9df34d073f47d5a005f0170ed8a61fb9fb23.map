{"version":3,"file":"C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\vendor-contract.spec.ts","sources":["C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\vendor-contract.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Context } from 'fabric-contract-api';\r\nimport { ChaincodeStub, ClientIdentity, Iterators } from 'fabric-shim';\r\nimport { testPDCName } from './___test-helper';\r\n\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport * as chai from 'chai';\r\nimport * as chaiAsPromised from 'chai-as-promised';\r\nimport * as sinon from 'sinon';\r\nimport * as sinonChai from 'sinon-chai';\r\nimport winston = require('winston');\r\n\r\nchai.should();\r\nchai.use(chaiAsPromised);\r\nchai.use(sinonChai);\r\n\r\nclass TestContext implements Context {\r\n    public stub: sinon.SinonStubbedInstance<ChaincodeStub> = sinon.createStubInstance(ChaincodeStub);\r\n    public clientIdentity: sinon.SinonStubbedInstance<ClientIdentity> = sinon.createStubInstance(ClientIdentity);\r\n    public logging = {\r\n        getLogger: sinon.stub().returns(sinon.createStubInstance(winston.createLogger().constructor)),\r\n        setLevel: sinon.stub(),\r\n     };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { VendorContract } from '../contracts/vendor.contract';\r\nimport { Vendor, VendorShipped, VendorList } from '../models';\r\n\r\ndescribe('VendorContract', () => {\r\n\r\n    let contract: VendorContract;\r\n    let ctx: TestContext;\r\n\r\n    let sampleVendor : Vendor[] = [];\r\n\r\n    beforeEach(() => {\r\n        // Prepare the Contract and Context\r\n        contract = new VendorContract();\r\n        ctx = new TestContext();\r\n        ctx.clientIdentity.getMSPID.returns('Org1MSP');\r\n\r\n        // Load the sample data file\r\n        sampleVendor = [{\r\n            \"RecordID\": \"DOES_EXIST\",\r\n            \"VendorID\": \"DOES_EXIST\",\r\n            \"ParentVendorID\": \"DOES_EXIST\",\r\n            \"Name\": \"Home Depot\",\r\n            \"TenantName\": \"homedepot\",\r\n            \"HLFOrganization\": \"HomeDepotOrg\",\r\n            \"HLFMemberServicesProvider\": \"HomeDepotMSP\",\r\n            LastUpdatedDate: 12062019\r\n        }] as Vendor[];\r\n\r\n        // Add Vendor List record, and record composite key creator\r\n        ctx.stub.createCompositeKey.withArgs('vendor', ['DEFAULT']).returns(' vendor DEFAULT');\r\n        ctx.stub.getPrivateData.withArgs(testPDCName, ' vendor DEFAULT').resolves(Buffer.from(JSON.stringify(new VendorList({ Items: sampleVendor }))));\r\n\r\n        // Add all records for the find search\r\n        let iterator : Iterators.StateQueryIterator = {\r\n            close: async () => { return; },\r\n            next: async () => { \r\n                iterator['currentIndex']++;\r\n                return {\r\n                    value : {\r\n                        key: 'vendor',\r\n                        value: Buffer.from(JSON.stringify(iterator['allItems'][iterator['currentIndex']])),\r\n                        getKey: ()=>'vendor',\r\n                        getValue: ()=>Buffer.from(JSON.stringify(sampleVendor))\r\n                    } as Iterators.KV,\r\n                    done : (iterator['allItems'].length == iterator['currentIndex']+1)\r\n                } as Iterators.NextResult; \r\n            }\r\n        } as Iterators.StateQueryIterator;\r\n\r\n        iterator['allItems'] = sampleVendor;\r\n        iterator['currentIndex'] = -1;\r\n\r\n        ctx.stub.getPrivateDataByPartialCompositeKey.withArgs(testPDCName, 'vendor', []).resolves(iterator);\r\n    });\r\n\r\n    describe('#saveVendor', () => {\r\n\r\n        it('should create a vendor', async () => {\r\n            let newVendor : Vendor = {\r\n                \"RecordID\": \"DOES_NOT_EXIST\",\r\n                \"VendorID\": \"DOES_NOT_EXIST\",\r\n                \"ParentVendorID\": \"DOES_NOT_EXIST\",\r\n                \"Name\": \"New Vendor\",\r\n                \"TenantName\": \"bosch\",\r\n                \"HLFOrganization\": \"BoschOrg\",\r\n                \"HLFMemberServicesProvider\": \"BoschMSP\",\r\n                LastUpdatedDate: 12062019\r\n            } as Vendor;\r\n\r\n            let resultVendor : Vendor[] = await contract.saveVendor(ctx, [newVendor]);\r\n\r\n            let finalVendor : Vendor[] = [];\r\n\r\n            finalVendor = [{\r\n                \"RecordID\": \"DOES_EXIST\",\r\n                \"VendorID\": \"DOES_EXIST\",\r\n                \"ParentVendorID\": \"DOES_EXIST\",\r\n                \"Name\": \"Home Depot\",\r\n                \"TenantName\": \"homedepot\",\r\n                \"HLFOrganization\": \"HomeDepotOrg\",\r\n                \"HLFMemberServicesProvider\": \"HomeDepotMSP\",\r\n                LastUpdatedDate: 12062019\r\n            },{\r\n                \"RecordID\": \"DOES_NOT_EXIST\",\r\n                \"VendorID\": \"DOES_NOT_EXIST\",\r\n                \"ParentVendorID\": \"DOES_NOT_EXIST\",\r\n                \"Name\": \"New Vendor\",\r\n                \"TenantName\": \"bosch\",\r\n                \"HLFOrganization\": \"BoschOrg\",\r\n                \"HLFMemberServicesProvider\": \"BoschMSP\",\r\n                LastUpdatedDate: 12062019\r\n            }] as Vendor[];\r\n\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWithExactly(testPDCName, ' vendor DEFAULT', Buffer.from(JSON.stringify(new VendorList({ Items: finalVendor }))));\r\n            chai.expect(resultVendor).to.deep.equal([newVendor]);\r\n        });\r\n\r\n        it('should update a vendor', async () => {\r\n            let updatedVendor : Vendor = {\r\n                RecordID: 'DOES_EXIST',\r\n                VendorID: 'DOES_EXIST',\r\n                ParentVendorID: 'UPDATED_VENDOR_ID',\r\n                Name: 'Updated Vendor',\r\n                TenantName: 'lutron',\r\n                HLFOrganization: 'LutronOrg',\r\n                HLFMemberServicesProvider: 'LutronMSP',\r\n                LastUpdatedDate: 12062019\r\n            } as Vendor;\r\n\r\n            let resultVendor : Vendor[] = await contract.saveVendor(ctx, [updatedVendor]);\r\n            ctx.stub.putPrivateData.should.have.been.calledOnceWithExactly(testPDCName, ' vendor DEFAULT', Buffer.from(JSON.stringify(new VendorList({ Items: [updatedVendor] }))));\r\n            chai.expect(resultVendor).to.deep.equal([updatedVendor]);\r\n        });\r\n\r\n    });\r\n\r\n    describe('#retrieveVendor', () => {\r\n        it('should return all Vendor data', async () => {\r\n            await contract.retrieveVendor(ctx).should.eventually.deep.equal(sampleVendor);\r\n        });\r\n    });\r\n\r\n\r\n});\r\n"]}