{"version":3,"file":"C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\___test-helper.ts","sources":["C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\___tests___\\___test-helper.ts"],"names":[],"mappings":"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","sourcesContent":["import { Context } from 'fabric-contract-api';\r\nimport { ChaincodeStub, ClientIdentity, Iterators } from 'fabric-shim';\r\nimport { AssetProcurement, UnitOfMeasureList, ADRRuleList } from \"../models\";\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\nimport * as chai from 'chai';\r\nimport * as chaiAsPromised from 'chai-as-promised';\r\nimport * as sinon from 'sinon';\r\nimport * as sinonChai from 'sinon-chai';\r\nimport winston = require('winston');\r\n\r\nexport class APTestConfig {\r\n    public input: AssetProcurement;\r\n    public output: AssetProcurement;\r\n    public existingAPs?: AssetProcurement[];\r\n    public existingUOMs?: UnitOfMeasureList;\r\n    public existingADRs?: ADRRuleList;\r\n\r\n    constructor(init?:Partial<APTestConfig>) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nchai.should();\r\nchai.use(chaiAsPromised);\r\nchai.use(sinonChai);\r\n\r\nexport class TestContext implements Context {\r\n    public stub: sinon.SinonStubbedInstance<ChaincodeStub> = sinon.createStubInstance(ChaincodeStub);\r\n    public clientIdentity: sinon.SinonStubbedInstance<ClientIdentity> = sinon.createStubInstance(ClientIdentity);\r\n    public logging = {\r\n        getLogger: sinon.stub().returns(sinon.createStubInstance(winston.createLogger().constructor)),\r\n        setLevel: sinon.stub(),\r\n     };\r\n}\r\n\r\n\r\nexport let testPDCName : string = 'collection_Org1MSP';\r\n\r\n\r\nexport class TestHelper {\r\n\r\n    constructor() {}\r\n\r\n    public static loadAPTestConfig(testID : string, ctx : TestContext, subfolder? : string | undefined) : APTestConfig {\r\n        ctx.clientIdentity.getMSPID.returns('Org1MSP');\r\n\r\n        let testFilePath : string = (subfolder === undefined) ? path.join(__dirname, 'testconfigs', testID+'.json') : path.join(__dirname, 'testconfigs', subfolder, testID+'.json');\r\n        let basicTestConfig : any = JSON.parse(fs.readFileSync(testFilePath).toString('utf8'));\r\n        let testConfig : APTestConfig = new APTestConfig();\r\n        testConfig.input = new AssetProcurement(basicTestConfig.input);\r\n        testConfig.output = new AssetProcurement(basicTestConfig.output);\r\n\r\n        if (basicTestConfig.existingUOMs === undefined) {\r\n            testConfig.existingUOMs = new UnitOfMeasureList({ Items: JSON.parse(fs.readFileSync(path.join(__dirname, 'testconfigs', 'UOM.json')).toString('utf8')) });\r\n        } else {\r\n            testConfig.existingUOMs = new UnitOfMeasureList({ Items: basicTestConfig.existingUOMs });\r\n        }\r\n        if (basicTestConfig.existingAPs === undefined) {\r\n            testConfig.existingAPs = JSON.parse(fs.readFileSync(path.join(__dirname, 'testconfigs', 'AP.json')).toString('utf8'));\r\n        } else {\r\n            testConfig.existingAPs = basicTestConfig.existingAPs;\r\n        }\r\n        if (basicTestConfig.existingADRs === undefined) {\r\n            testConfig.existingADRs = new ADRRuleList({ Items: JSON.parse(fs.readFileSync(path.join(__dirname, 'testconfigs', 'ADR.json')).toString('utf8')) });\r\n        } else {\r\n            testConfig.existingADRs = new ADRRuleList({ Items: basicTestConfig.existingADRs });\r\n        }\r\n \r\n        // Add the UOM List record, and record composite key creator\r\n        ctx.stub.createCompositeKey.withArgs('uom', ['DEFAULT']).returns(' uom DEFAULT');\r\n        ctx.stub.getPrivateData.withArgs(testPDCName, ' uom DEFAULT').resolves(Buffer.from(JSON.stringify(testConfig.existingUOMs)));\r\n\r\n        // Add each AP record, and record composite key creator\r\n        for (let ap of testConfig.existingAPs) {\r\n            ctx.stub.createCompositeKey.withArgs('ap', [ap.PONumber]).returns(' ap '+ap.PONumber);\r\n            ctx.stub.getPrivateData.withArgs(testPDCName, ' ap '+ap.PONumber).resolves(Buffer.from(JSON.stringify(ap)));\r\n        }\r\n\r\n        // Add all records for the find search\r\n        let apIterator : Iterators.StateQueryIterator = {\r\n            close: async () => { return; },\r\n            next: async () => { \r\n                apIterator['currentIndex']++;\r\n                return {\r\n                    value : {\r\n                        key: 'ap',\r\n                        value: Buffer.from(JSON.stringify(apIterator['allItems'][apIterator['currentIndex']])),\r\n                        getKey: ()=>'ap',\r\n                        getValue: ()=>Buffer.from(JSON.stringify(testConfig.existingAPs))\r\n                    } as Iterators.KV,\r\n                    done : (apIterator['allItems'].length == apIterator['currentIndex']+1)\r\n                } as Iterators.NextResult; \r\n            }\r\n        } as Iterators.StateQueryIterator;\r\n\r\n        apIterator['allItems'] = testConfig.existingAPs;\r\n        apIterator['currentIndex'] = -1;\r\n\r\n        ctx.stub.getPrivateDataByPartialCompositeKey.withArgs(testPDCName, 'ap', []).resolves(apIterator);\r\n\r\n        // Add the ADR Rule List record, and record composite key creator\r\n        ctx.stub.createCompositeKey.withArgs('adr', ['DEFAULT']).returns(' adr DEFAULT');\r\n        ctx.stub.getPrivateData.withArgs(testPDCName, ' adr DEFAULT').resolves(Buffer.from(JSON.stringify(testConfig.existingADRs)));\r\n\r\n        // Add the null record\r\n        ctx.stub.createCompositeKey.withArgs('ap', ['DOES_NOT_EXIST']).returns(' ap DOES_NOT_EXIST');\r\n        ctx.stub.getPrivateData.withArgs(testPDCName, ' ap DOES_NOT_EXIST').resolves(Buffer.from(''));\r\n\r\n\r\n        return testConfig;\r\n    }\r\n\r\n}"]}