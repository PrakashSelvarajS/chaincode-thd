{"version":3,"file":"C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\decorators\\property-validator.decorator.ts","sources":["C:\\Users\\PRAKASHSELVARAJ\\Blockchain\\Home Depot\\Development\\chaincode_0901\\src\\decorators\\property-validator.decorator.ts"],"names":[],"mappings":"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","sourcesContent":["\r\n\r\nconst Logger = require('../logger');\r\nconst logger = Logger.getLogger('./decorators/property-validator.decorator.ts');\r\nimport 'reflect-metadata';\r\n\r\n\r\nconst objectSerializationMap = new WeakMap();\r\n\r\nexport function ValidatedObject() {    \r\n    return (constructor : Function) => {\r\n        logger.debug('@ValidatedObject args: Target ->' + constructor.name);\r\n        constructor.prototype.toJSON = function () {\r\n            let jsonResult = {};\r\n            // First, we want to serialize all the basic properties for this instance\r\n            const instancePropertyKeys : string[] = Object.getOwnPropertyNames(this);\r\n            instancePropertyKeys.forEach((v,i,l)=>{\r\n              //@ts-ignore\r\n              jsonResult[v] = this[v];\r\n            });\r\n            \r\n            // Then add all the properties that have Validators attached to them\r\n            const map = objectSerializationMap.get(constructor.prototype);\r\n            const props = Object.keys(map);\r\n            return props.reduce((previous, key) => {\r\n              if (Object.keys(previous).findIndex((v,i,l)=>{ return v == key; }) > -1) { return previous; }\r\n      \r\n              //@ts-ignore\r\n              previous[map[key]] = this[key];\r\n              return previous;\r\n            }, jsonResult);\r\n        }\r\n    };\r\n}\r\n\r\n\r\n\r\n\r\nexport interface ValidatorConfig { key?: Symbol; }\r\n\r\nconst ALL_VALIDATOR_CONFIGS : Map<Symbol, ValidatorConfig> = new Map<Symbol, ValidatorConfig>();\r\n\r\nexport function ListValidatorConfigs() {\r\n    logger.debug('LIST OF ALL VALIDATOR CONFIGURATIONS');\r\n    logger.debug('====================================');\r\n    ALL_VALIDATOR_CONFIGS.forEach((v,k,m)=>{\r\n        logger.debug('Key = ' + k.toString());\r\n        logger.debug('Value = ' + JSON.stringify(v));\r\n        logger.debug('-------------------------------------');\r\n    });\r\n    logger.debug('====================================');\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport interface NumberRangeConfig extends ValidatorConfig {\r\n    minimum?: number;\r\n    maximum?: number;\r\n    defaultMinimum?: number;\r\n    defaultMaximum?: number;\r\n}\r\n  \r\nexport function NumberRangeValidator(config: NumberRangeConfig) {\r\n    return (target: any, propertyKey: string | symbol) : any => {\r\n        logger.debug('@NumberRangeValidator args:', `target -> ${target.constructor.name},`, 'propertyKey ->', propertyKey);\r\n        if (config.defaultMinimum === undefined) { config.defaultMinimum = -1 * Number.MAX_VALUE; }\r\n        if (config.defaultMaximum === undefined) { config.defaultMaximum = Number.MAX_VALUE; }\r\n\r\n        // Create a key for storing the config for this instance using the target name and the propertyKey\r\n        const key = target.constructor.name + '-' + propertyKey.toString();\r\n        \r\n        let map = objectSerializationMap.get(target);\r\n        if (!map) {\r\n            map = {};\r\n            objectSerializationMap.set(target, map);\r\n        }\r\n\r\n        map[propertyKey] = propertyKey;\r\n\r\n        // Store the config for this instance\r\n        ALL_VALIDATOR_CONFIGS[key] = config;\r\n        //ListValidatorConfigs();\r\n\r\n        // Create the range validator using the config\r\n        const numberIsInRange = (newPropertyValue: number) : boolean => {\r\n            // Retrieve the config from storage\r\n            const currentConfig : NumberRangeConfig|undefined = ALL_VALIDATOR_CONFIGS[key];\r\n            const rangeMinimum : number = (currentConfig === undefined || currentConfig.minimum === undefined) ? -1 * Number.MAX_VALUE : currentConfig.minimum;\r\n            const rangeMaximum : number = (currentConfig === undefined || currentConfig.maximum === undefined) ? Number.MAX_VALUE : currentConfig.maximum;\r\n            \r\n            logger.debug('numberIsInRange : value = ' + newPropertyValue + ', min = ' + rangeMinimum + ', max = ' + rangeMaximum);\r\n\r\n            return (newPropertyValue >= rangeMinimum && newPropertyValue <= rangeMaximum);\r\n        };\r\n    \r\n        // We need a unique key for storing the property value\r\n        const propertyValueStorageKey = Symbol();\r\n    \r\n        // We can return a property descriptor that is used to define a property on the target given the `propertyKey`.\r\n        return {\r\n            get() {\r\n                // Read the value from the target instance using the unique symbol from above\r\n                return this[propertyValueStorageKey]; \r\n            },\r\n            set(newPropertyValue: any) { \r\n                // Retrieve the config from storage\r\n                if (Number.isNaN(newPropertyValue)) { throw new Error(`Property value provided for ${key} is not a number: ${newPropertyValue}`); }\r\n                if ( ! numberIsInRange(newPropertyValue)) { throw new Error(`Property value provided for ${key} is not in the valid range: ${newPropertyValue}, config: ${config}`); }\r\n                \r\n                // Save this new value because it is valid\r\n                this[propertyValueStorageKey] = newPropertyValue;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport interface TextConfig extends ValidatorConfig {\r\n    minimumLength?: number;\r\n    maximumLength?: number;\r\n    allowLeadingSpaces?: boolean;\r\n    allowTrailingSpaces?: boolean;\r\n    characterSetRegularExpression?: RegExp;\r\n}\r\n  \r\nexport function TextValidator(config: TextConfig) {\r\n    return (target: any, propertyKey: string | symbol) : any => {\r\n        logger.debug('@TextValidator args:', `target -> ${target.constructor.name},`, 'propertyKey ->', propertyKey);\r\n        if (config.minimumLength === undefined) { config.minimumLength = 0; }\r\n        if (config.maximumLength === undefined) { config.maximumLength = Number.MAX_SAFE_INTEGER; }\r\n        if (config.allowLeadingSpaces === undefined) { config.allowLeadingSpaces = true; }\r\n        if (config.allowTrailingSpaces === undefined) { config.allowTrailingSpaces = true; }\r\n        if (config.characterSetRegularExpression === undefined) { config.characterSetRegularExpression = /[\\s\\S]*/; }\r\n\r\n        // Create a key for storing the config for this instance using the target name and the propertyKey\r\n        const key = target.constructor.name + '-' + propertyKey.toString();\r\n        \r\n        let map = objectSerializationMap.get(target);\r\n        if (!map) {\r\n            map = {};\r\n            objectSerializationMap.set(target, map);\r\n        }\r\n\r\n        map[propertyKey] = propertyKey;\r\n\r\n        // Store the config for this instance\r\n        ALL_VALIDATOR_CONFIGS[key] = config;\r\n\r\n        // Create the text validator using the config\r\n        const textIsValid = (newPropertyValue: string) : boolean => {\r\n            // Retrieve the config from storage\r\n            const currentConfig : TextConfig = ALL_VALIDATOR_CONFIGS[key];\r\n\r\n            if ( currentConfig.allowLeadingSpaces === false && newPropertyValue.startsWith(' ') ) { return false; }\r\n            if ( currentConfig.allowTrailingSpaces === false && newPropertyValue.endsWith(' ') ) { return false; }\r\n            if ( currentConfig.minimumLength > 0 && newPropertyValue.length < currentConfig.minimumLength ) { return false; }\r\n            if ( currentConfig.maximumLength > 0 && newPropertyValue.length > currentConfig.maximumLength ) { return false; }\r\n            if ( currentConfig.characterSetRegularExpression.exec(newPropertyValue).length !== 1) { return false; }\r\n            \r\n            logger.debug(`textIsValid : value = '${newPropertyValue}', min = ${currentConfig.minimumLength}, max = ${currentConfig.maximumLength}, leadingSpaces = ${currentConfig.allowLeadingSpaces}, trailingSpaces = ${currentConfig.allowTrailingSpaces}, characterSetRegex = ${currentConfig.characterSetRegularExpression.source}`);\r\n\r\n            return true;\r\n        };\r\n    \r\n        // We need a unique key for storing the property value\r\n        const propertyValueStorageKey = Symbol();\r\n    \r\n        // We can return a property descriptor that is used to define a property on the target given the `propertyKey`.\r\n        return {\r\n            get() {\r\n                // Read the value from the target instance using the unique symbol from above\r\n                return this[propertyValueStorageKey]; \r\n            },\r\n            set(newPropertyValue: any) { \r\n                // Retrieve the config from storage\r\n                if ( ! textIsValid(newPropertyValue)) { throw new Error(`Property value provided for ${key} is not valid text: ${newPropertyValue}, config: ${config}`); }\r\n                \r\n                // Save this new value because it is valid\r\n                this[propertyValueStorageKey] = newPropertyValue;\r\n            }\r\n        }\r\n    }\r\n}"]}